{"interfaceLanguages":{"swift":[{"children":[{"title":"Address Codec","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/addresscodec\/classicaddresstoxaddress(classicaddress:tag:istest:)","title":"static func classicAddressToXAddress(classicAddress: String, tag: Int?, isTest: Bool) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/addresscodec\/isvalidxaddress(xaddress:)","title":"static func isValidXAddress(xAddress: String) -> Bool","type":"method"},{"path":"\/documentation\/xrplswift\/addresscodec\/xaddresstoclassicaddress(xaddress:)","title":"static func xAddressToClassicAddress(xAddress: String) throws -> FullClassicAddress","type":"method"}],"path":"\/documentation\/xrplswift\/addresscodec","title":"AddressCodec","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplcodec\/init()","title":"init()","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplcodec\/decode(b58string:prefix:)","title":"static func decode(b58String: String, prefix: [UInt8]) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/decodeaccountpublickey(accountpublickey:)","title":"static func decodeAccountPublicKey(accountPublicKey: String) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/decodeclassicaddress(classicaddress:)","title":"static func decodeClassicAddress(classicAddress: String) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/decodenodepublickey(nodepublickey:)","title":"static func decodeNodePublicKey(nodePublicKey: String) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/decodeseed(seed:)","title":"static func decodeSeed(seed: String) throws -> ([UInt8], AlgorithmType)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/encode(bytes:prefix:expectedlength:)","title":"static func encode(bytes: [UInt8], prefix: [UInt8], expectedLength: Int) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/encodeaccountpublickey(bytes:)","title":"static func encodeAccountPublicKey(bytes: [UInt8]) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/encodeclassicaddress(bytes:)","title":"static func encodeClassicAddress(bytes: [UInt8]) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/encodenodepublickey(bytes:)","title":"static func encodeNodePublicKey(bytes: [UInt8]) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/encodeseed(entropy:type:)","title":"static func encodeSeed(entropy: [UInt8], type: AlgorithmType) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/xrplcodec\/isvalidclassicaddress(classicaddress:)","title":"static func isValidClassicAddress(classicAddress: String) -> Bool","type":"method"}],"path":"\/documentation\/xrplswift\/xrplcodec","title":"XrplCodec","type":"class"},{"title":"Binary Codec","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binaryparser\/init(hex:)","title":"init(hex: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binaryparser\/bytes","title":"var bytes: [UInt8]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binaryparser\/end(customend:)","title":"func end(customEnd: Int?) -> Bool","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/peek()","title":"func peek() throws -> UInt8","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/read(n:)","title":"func read(n: Int) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/readuint16()","title":"func readUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/readuint32()","title":"func readUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/readuint8()","title":"func readUInt8() -> UInt8","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/readuintn(n:)","title":"func readUIntN(n: Int) throws -> Int","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/size()","title":"func size() -> Int","type":"method"},{"path":"\/documentation\/xrplswift\/binaryparser\/skip(n:)","title":"func skip(n: Int) throws","type":"method"}],"path":"\/documentation\/xrplswift\/binaryparser","title":"BinaryParser","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binaryserializer\/sink","title":"var sink: BytesList","type":"property"}],"path":"\/documentation\/xrplswift\/binaryserializer","title":"BinarySerializer","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/definitions\/definitions","title":"var definitions: LoadDefinitions!","type":"property"}],"path":"\/documentation\/xrplswift\/definitions","title":"Definitions","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/fieldheader\/fieldcode","title":"var fieldCode: Int","type":"property"},{"path":"\/documentation\/xrplswift\/fieldheader\/typecode","title":"var typeCode: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/fieldheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/fieldheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/fieldheader","title":"FieldHeader","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/fieldinfo\/isserialized","title":"var isSerialized: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/fieldinfo\/issigningfield","title":"var isSigningField: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/fieldinfo\/isvlencoded","title":"var isVLEncoded: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/fieldinfo\/nth","title":"var nth: Int","type":"property"},{"path":"\/documentation\/xrplswift\/fieldinfo\/type","title":"var type: String","type":"property"}],"path":"\/documentation\/xrplswift\/fieldinfo","title":"FieldInfo","type":"class"},{"title":"Binary Codec (Types)","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/amount\/ic(_:)","title":"case ic(IssuedCurrencyAmount)","type":"case"},{"path":"\/documentation\/xrplswift\/amount\/string(_:)","title":"case string(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/amount\/value","title":"var value: Any","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/amount\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/amount\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/amount\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/amount\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/amount","title":"Amount","type":"enum"},{"title":"Binary Codec (Utils)","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binaryerror\/notimplemented","title":"case notImplemented","type":"case"},{"path":"\/documentation\/xrplswift\/binaryerror\/unknownerror(error:)","title":"case unknownError(error: String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binaryerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/binaryerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/binaryerror","title":"BinaryError","type":"enum"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/byteslist\/getlength()","title":"func getLength() -> Int","type":"method"},{"path":"\/documentation\/xrplswift\/byteslist\/put(bytesarg:)","title":"func put(bytesArg: [UInt8]) -> BytesList","type":"method"},{"path":"\/documentation\/xrplswift\/byteslist\/tobytes()","title":"func toBytes() -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/byteslist\/tobytessink(list:)","title":"func toBytesSink(list: BytesList)","type":"method"}],"path":"\/documentation\/xrplswift\/byteslist","title":"BytesList","type":"class"},{"title":"Keypairs","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/keypairs\/deriveaddress(publickey:)","title":"static func deriveAddress(publicKey: String) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/deriveaddressfrombytes(publickeybytes:)","title":"static func deriveAddressFromBytes(publicKeyBytes: Data) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/derivekeypair(seed:isvalidator:)","title":"static func deriveKeypair(seed: String, isValidator: Bool) throws -> KeyPair","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/derivenodeaddress(publickey:)","title":"static func deriveNodeAddress(publicKey: String) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/generateseed(options:)","title":"static func generateSeed(options: KeypairsOptions) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/getalgorithmfromkey(key:)","title":"static func getAlgorithmFromKey(key: String) -> AlgorithmType","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/hash(message:)","title":"static func hash(message: String) -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/sign(message:privatekey:)","title":"static func sign(message: [UInt8], privateKey: String) -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/keypairs\/verify(signature:message:publickey:)","title":"static func verify(signature: [UInt8], message: [UInt8], publicKey: String) -> Bool","type":"method"}],"path":"\/documentation\/xrplswift\/keypairs","title":"Keypairs","type":"class"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/keypairserrors\/algorithm(_:)","title":"case algorithm(String)","type":"case"},{"path":"\/documentation\/xrplswift\/keypairserrors\/invalidprivatekey","title":"case invalidPrivateKey","type":"case"},{"path":"\/documentation\/xrplswift\/keypairserrors\/unknown","title":"case unknown","type":"case"},{"path":"\/documentation\/xrplswift\/keypairserrors\/unknownerror(error:)","title":"case unknownError(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/keypairserrors\/validation(_:)","title":"case validation(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/keypairserrors\/localizeddescription-295op","title":"var localizedDescription: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/keypairserrors\/localizeddescription-9r9a6","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/keypairserrors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/keypairserrors","title":"KeypairsErrors","type":"enum"},{"title":"Xrpl Clients","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplclient\/init(server:options:)","title":"init(server: String, options: ClientOptions?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplclient\/connection","title":"var connection: Connection","type":"property"},{"path":"\/documentation\/xrplswift\/xrplclient\/feecushion","title":"let feeCushion: Double","type":"property"},{"path":"\/documentation\/xrplswift\/xrplclient\/maxfeexrp","title":"let maxFeeXRP: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplclient\/autofill(transaction:signerscount:)","title":"func autofill(transaction: Transaction, signersCount: Int?) async throws -> EventLoopFuture<[String : AnyObject]>","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/connect()","title":"func connect() async throws -> EventLoopFuture<Any>","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/connected()","title":"func connected()","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/consensusphase(consensus:)","title":"func consensusPhase(consensus: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/disconnect()","title":"func disconnect() async -> EventLoopFuture<Any?>","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/disconnected(code:)","title":"func disconnected(code: Int)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/error(code:message:data:)","title":"func error(code: Int, message: Any, data: Data)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/getledgerindex()","title":"func getLedgerIndex() async throws -> Int","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/getxrpbalance(address:)","title":"func getXrpBalance(address: String) async throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/isconnected()","title":"func isConnected() -> Bool","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/ledgerclosed(ledger:)","title":"func ledgerClosed(ledger: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/manifestreceived(manifest:)","title":"func manifestReceived(manifest: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/pathfind(path:)","title":"func pathFind(path: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/peerstatuschange(status:)","title":"func peerStatusChange(status: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/request(_:)","title":"func request<R>(R) async throws -> EventLoopFuture<Any>","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/request(r:)","title":"func request<R>(r: R) async -> EventLoopFuture<Any>","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/request(req:)","title":"func request<R>(req: R) async throws -> EventLoopFuture<Any>?","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/submit(transaction:opts:)","title":"func submit(transaction: Transaction, opts: SubmitOptions?) async throws -> EventLoopFuture<Any>","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/transaction(tx:)","title":"func transaction(tx: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplclient\/validationreceived(validation:)","title":"func validationReceived(validation: Any)","type":"method"}],"path":"\/documentation\/xrplswift\/xrplclient","title":"XrplClient","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/xrplerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/xrplerror","title":"XrplError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/connection\/init(url:options:)","title":"init(url: String?, options: ConnectionUserOptions?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/connection\/connect()","title":"func connect() async throws -> EventLoopFuture<Any>","type":"method"},{"path":"\/documentation\/xrplswift\/connection\/disconnect()","title":"func disconnect() async -> EventLoopFuture<Any?>","type":"method"},{"path":"\/documentation\/xrplswift\/connection\/geturl()","title":"func getUrl() -> String","type":"method"},{"path":"\/documentation\/xrplswift\/connection\/isconnected()","title":"func isConnected() -> Bool","type":"method"},{"path":"\/documentation\/xrplswift\/connection\/reconnect()","title":"func reconnect() async throws","type":"method"},{"path":"\/documentation\/xrplswift\/connection\/request(request:timeout:)","title":"func request<R>(request: R, timeout: Int?) async throws -> EventLoopFuture<Any>","type":"method"}],"path":"\/documentation\/xrplswift\/connection","title":"Connection","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/connectionmanager\/awaitconnection()","title":"func awaitConnection() async -> EventLoopFuture<Any>","type":"method"},{"path":"\/documentation\/xrplswift\/connectionmanager\/rejectallawaiting(error:)","title":"func rejectAllAwaiting(error: Error)","type":"method"},{"path":"\/documentation\/xrplswift\/connectionmanager\/resolveallawaiting()","title":"func resolveAllAwaiting()","type":"method"}],"path":"\/documentation\/xrplswift\/connectionmanager","title":"ConnectionManager","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/requestmanager\/createrequest(request:timeout:)","title":"func createRequest<R>(request: R, timeout: Int) throws -> (Int, String, EventLoopFuture<Any>)","type":"method"},{"path":"\/documentation\/xrplswift\/requestmanager\/handleresponse(response:)","title":"func handleResponse(response: [String : AnyObject]?) throws","type":"method"},{"path":"\/documentation\/xrplswift\/requestmanager\/reject(id:error:)","title":"func reject(id: Int, error: Error) throws","type":"method"},{"path":"\/documentation\/xrplswift\/requestmanager\/rejectall(error:)","title":"func rejectAll(error: Error) throws","type":"method"},{"path":"\/documentation\/xrplswift\/requestmanager\/resolve(_:_:_:)","title":"func resolve(Int, Any?, Error?) throws","type":"method"},{"path":"\/documentation\/xrplswift\/requestmanager\/resolve(id:error:)","title":"func resolve(id: Int, error: Any) throws","type":"method"}],"path":"\/documentation\/xrplswift\/requestmanager","title":"RequestManager","type":"class"},{"title":"Xrpl Sugar","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/autofillsugar\/classicaccountandtag\/classicaccount","title":"let classicAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/autofillsugar\/classicaccountandtag\/tag","title":"let tag: Int?","type":"property"}],"path":"\/documentation\/xrplswift\/autofillsugar\/classicaccountandtag","title":"AutoFillSugar.ClassicAccountAndTag","type":"struct"}],"path":"\/documentation\/xrplswift\/autofillsugar","title":"AutoFillSugar","type":"class"},{"title":"Xrpl Models: Ledger Objects (“LO”)","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountroot\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountroot\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/accounttxnid","title":"let accountTxnId: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/balance","title":"let balance: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/domain","title":"let domain: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/emailhash","title":"let emailHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/flags","title":"let flags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/ledgerentrytype","title":"let ledgerEntryType: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/messagekey","title":"let messageKey: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/ownercount","title":"let ownerCount: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/previoustxnid","title":"let previousTxnId: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/previoustxnlgrseq","title":"let previousTxnLgrSeq: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/regularkey","title":"let regularKey: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/sequence","title":"let sequence: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/ticksize","title":"let tickSize: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/ticketcount","title":"let ticketCount: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountroot\/transferrate","title":"let transferRate: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountroot\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountroot","title":"AccountRoot","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/amendments\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/amendments","title":"Amendments","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseledger\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseledger\/accounthash","title":"let accountHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/accountstate","title":"var accountState: [LedgerEntry]?","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/closeflags","title":"var closeFlags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/closetime","title":"var closeTime: Int","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/closetimehuman","title":"var closeTimeHuman: String","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/closetimeresolution","title":"var closeTimeResolution: Int","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/closed","title":"var closed: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/ledgerhash","title":"var ledgerHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/ledgerindex","title":"var ledgerIndex: String","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/parentclosetime","title":"var parentCloseTime: Int","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/parenthash","title":"var parentHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/totalcoins","title":"var totalCoins: String","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/transactionhash","title":"var transactionHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/baseledger\/transactions","title":"var transactions: [BaseLedgerWrapper]?","type":"property"}],"path":"\/documentation\/xrplswift\/baseledger","title":"BaseLedger","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseledgerentry\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/baseledgerentry","title":"BaseLedgerEntry","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/check\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/check\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/check\/destination","title":"let destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/check\/destinationnode","title":"let destinationNode: String?","type":"property"},{"path":"\/documentation\/xrplswift\/check\/destinationtag","title":"let destinationTag: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/check\/expiration","title":"let expiration: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/check\/flags","title":"var flags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/check\/invoiceid","title":"let invoiceId: String?","type":"property"},{"path":"\/documentation\/xrplswift\/check\/ledgerentrytype","title":"var ledgerEntryType: String","type":"property"},{"path":"\/documentation\/xrplswift\/check\/ownernode","title":"let ownerNode: String","type":"property"},{"path":"\/documentation\/xrplswift\/check\/previoustxnid","title":"let previousTxnId: String","type":"property"},{"path":"\/documentation\/xrplswift\/check\/previoustxnlgrseq","title":"let previousTxnLgrSeq: Int","type":"property"},{"path":"\/documentation\/xrplswift\/check\/sendmax","title":"let sendMax: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/check\/sequence","title":"let sequence: Int","type":"property"},{"path":"\/documentation\/xrplswift\/check\/sourcetag","title":"let sourceTag: Int?","type":"property"}],"path":"\/documentation\/xrplswift\/check","title":"Check","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositpreauth\/init(authorize:unauthorize:)","title":"init(authorize: String?, unauthorize: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/depositpreauth\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/depositpreauth\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositpreauth\/authorize","title":"let authorize: String?","type":"property"},{"path":"\/documentation\/xrplswift\/depositpreauth\/unauthorize","title":"let unauthorize: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositpreauth\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/depositpreauth","title":"DepositPreauth","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/directorynode\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/directorynode","title":"DirectoryNode","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrow\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrow\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/amount","title":"let amount: String","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/cancelafter","title":"let cancelAfter: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/condition","title":"let condition: String?","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/destination","title":"let destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/destinationnode","title":"let destinationNode: String?","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/destinationtag","title":"let destinationTag: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/finishafter","title":"let finishAfter: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/flags","title":"let flags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/ledgerentrytype","title":"var ledgerEntryType: String","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/ownernode","title":"let ownerNode: String","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/previoustxnid","title":"let previousTxnId: String","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/previoustxnlgrseq","title":"let previousTxnLgrSeq: Int","type":"property"},{"path":"\/documentation\/xrplswift\/escrow\/sourcetag","title":"let sourceTag: Int?","type":"property"}],"path":"\/documentation\/xrplswift\/escrow","title":"Escrow","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/feesettings\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/feesettings","title":"FeeSettings","type":"class"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerentry\/accountroot","title":"case accountRoot","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/amendments","title":"case amendments","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/check","title":"case check","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/depositpreauth","title":"case depositPreauth","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/directorynode(_:)","title":"case directoryNode(Node)","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/escrow","title":"case escrow","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/feesettings","title":"case feeSettings","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/ledgerhashes","title":"case ledgerHashes","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/negativeunl","title":"case negativeUNL","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/offer","title":"case offer","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/paychannel","title":"case payChannel","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/ripplestate","title":"case rippleState","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/signerlist","title":"case signerList","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerentry\/ticket","title":"case ticket","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerentry\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ledgerentry","title":"LedgerEntry","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerhashes\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ledgerhashes","title":"LedgerHashes","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/negativeunl\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/negativeunl","title":"NegativeUNL","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offer\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/offer","title":"Offer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paychannel\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/paychannel","title":"PayChannel","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlist\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/signerlist","title":"SignerList","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ticket\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ticket","title":"Ticket","type":"class"},{"title":"Xrpl Models: Methods","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/init(account:id:apiversion:destinationaccount:ledgerhash:ledgerindex:limit:marker:)","title":"init(account: String, id: Int?, apiVersion: Int?, destinationAccount: String?, ledgerHash: String?, ledgerIndex: LedgerIndex?, limit: Int?, marker: AnyCodable?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/account","title":"var account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/destinationaccount","title":"var destinationAccount: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/ledgerhash","title":"var ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/ledgerindex","title":"var ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/limit","title":"var limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/marker","title":"var marker: AnyCodable?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountchannelsrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountchannelsrequest","title":"AccountChannelsRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/account","title":"var account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/channels","title":"var channels: [Channel]","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/ledgerhash","title":"var ledgerHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/ledgerindex","title":"var ledgerIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/limit","title":"var limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/marker","title":"var marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accountchannelsresponse\/validated","title":"var validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/accountchannelsresponse","title":"AccountChannelsResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountcurrenciesrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountcurrenciesrequest\/init(account:id:apiversion:ledgerhash:ledgerindex:strict:)","title":"init(account: String, id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?, strict: Bool?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountcurrenciesrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountcurrenciesrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountcurrenciesrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/accountcurrenciesrequest\/strict","title":"let strict: Bool?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountcurrenciesrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountcurrenciesrequest","title":"AccountCurrenciesRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountcurrenciesresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountcurrenciesresponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountcurrenciesresponse\/ledgerindex","title":"let ledgerIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountcurrenciesresponse\/receivecurrencies","title":"let receiveCurrencies: [String]","type":"property"},{"path":"\/documentation\/xrplswift\/accountcurrenciesresponse\/sendcurrencies","title":"let sendCurrencies: [String]","type":"property"},{"path":"\/documentation\/xrplswift\/accountcurrenciesresponse\/validated","title":"let validated: Bool","type":"property"}],"path":"\/documentation\/xrplswift\/accountcurrenciesresponse","title":"AccountCurrenciesResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountinforequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountinforequest\/init(account:id:apiversion:ledgerhash:ledgerindex:queue:signerlists:strict:)","title":"init(account: String, id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?, queue: Bool?, signerLists: Bool?, strict: Bool?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountinforequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforequest\/queue","title":"let queue: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforequest\/signerlists","title":"let signerLists: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforequest\/strict","title":"let strict: Bool?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountinforequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountinforequest","title":"AccountInfoRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/accountdata","title":"let accountData: AccountRoot","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/queuedata","title":"let queueData: QueueData?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/signerlists","title":"let signerLists: [SignerList]?","type":"property"},{"path":"\/documentation\/xrplswift\/accountinforesponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/accountinforesponse","title":"AccountInfoResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/init(account:id:apiversion:ledgerhash:ledgerindex:peer:limit:marker:)","title":"init(account: String, id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?, peer: Int?, limit: Int?, marker: AnyCodable?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/peer","title":"let peer: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountlinesrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountlinesrequest","title":"AccountLinesRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountlinesresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountlinesresponse\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesresponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesresponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesresponse\/lines","title":"let lines: [Trustline]","type":"property"},{"path":"\/documentation\/xrplswift\/accountlinesresponse\/marker","title":"let marker: AnyCodable?","type":"property"}],"path":"\/documentation\/xrplswift\/accountlinesresponse","title":"AccountLinesResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountnftsrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountnftsrequest\/init(account:id:apiversion:limit:marker:)","title":"init(account: String, id: Int?, apiVersion: Int?, limit: Int?, marker: AnyCodable?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountnftsrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftsrequest\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftsrequest\/marker","title":"let marker: AnyCodable?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountnftsrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountnftsrequest","title":"AccountNFTsRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountnftsresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountnftsresponse\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftsresponse\/accountnfts","title":"let accountNfts: [AccountNFToken]","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftsresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftsresponse\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftsresponse\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftsresponse\/validated","title":"let validated: Bool","type":"property"}],"path":"\/documentation\/xrplswift\/accountnftsresponse","title":"AccountNFTsResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/init(account:id:apiversion:type:deletionblockersonly:ledgerhash:ledgerindex:limit:marker:)","title":"init(account: String, id: Int?, apiVersion: Int?, type: AccountObjectType?, deletionBlockersOnly: Bool?, ledgerHash: String?, ledgerIndex: LedgerIndex?, limit: Int?, marker: AnyCodable?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/deletionblockersonly","title":"let deletionBlockersOnly: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/type","title":"let type: AccountObjectType?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjectsrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountobjectsrequest","title":"AccountObjectsRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/accountobjects","title":"let accountObjects: [AccountObject]","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accountobjectsresponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/accountobjectsresponse","title":"AccountObjectsResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/init(account:id:apiversion:ledgerhash:ledgerindex:limit:marker:strict:)","title":"init(account: String, id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?, limit: Int?, marker: AnyCodable?, strict: Bool?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/strict","title":"let strict: Bool?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountoffersrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountoffersrequest","title":"AccountOffersRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountoffersresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountoffersresponse\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersresponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersresponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersresponse\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffersresponse\/offers","title":"let offers: [AccountOffer]?","type":"property"}],"path":"\/documentation\/xrplswift\/accountoffersresponse","title":"AccountOffersResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/init(account:id:apiversion:ledgerindexmin:ledgerindexmax:ledgerhash:ledgerindex:binary:forward:limit:marker:)","title":"init(account: String, id: Int?, apiVersion: Int?, ledgerIndexMin: Int?, ledgerIndexMax: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?, binary: Bool?, forward: Bool?, limit: Int?, marker: AnyCodable?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/binary","title":"let binary: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/forward","title":"let forward: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/ledgerindexmax","title":"let ledgerIndexMax: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/ledgerindexmin","title":"let ledgerIndexMin: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/marker","title":"let marker: AnyCodable?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accounttxrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accounttxrequest","title":"AccountTxRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/ledgerindexmax","title":"let ledgerIndexMax: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/ledgerindexmin","title":"let ledgerIndexMin: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/limit","title":"let limit: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/transactions","title":"let transactions: [AccountTransaction]","type":"property"},{"path":"\/documentation\/xrplswift\/accounttxresponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/accounttxresponse","title":"AccountTxResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/init(takergets:takerpays:id:apiversion:ledgerhash:ledgerindex:limit:taker:)","title":"init(takerGets: TakerAmount, takerPays: TakerAmount, id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?, limit: Int?, taker: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/taker","title":"let taker: String?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/takergets","title":"let takerGets: TakerAmount","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/takerpays","title":"let takerPays: TakerAmount","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bookoffersrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/bookoffersrequest","title":"BookOffersRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bookoffersresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bookoffersresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersresponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersresponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersresponse\/offers","title":"let offers: [BookOffer]","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffersresponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/bookoffersresponse","title":"BookOffersResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelverifyrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/channelverifyrequest\/init(amount:channelid:publickey:signature:id:apiversion:)","title":"init(amount: String, channelId: String, publicKey: String, signature: String, id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelverifyrequest\/amount","title":"let amount: String","type":"property"},{"path":"\/documentation\/xrplswift\/channelverifyrequest\/channelid","title":"let channelId: String","type":"property"},{"path":"\/documentation\/xrplswift\/channelverifyrequest\/publickey","title":"let publicKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/channelverifyrequest\/signature","title":"let signature: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelverifyrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/channelverifyrequest","title":"ChannelVerifyRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelverifyresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelverifyresponse\/signatureverified","title":"let signatureVerified: Bool","type":"property"}],"path":"\/documentation\/xrplswift\/channelverifyresponse","title":"ChannelVerifyResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositauthorizedrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/depositauthorizedrequest\/init(sourceaccount:destinationaccount:id:apiversion:ledgerhash:ledgerindex:)","title":"init(sourceAccount: String, destinationAccount: String, id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositauthorizedrequest\/destinationaccount","title":"let destinationAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedrequest\/sourceaccount","title":"let sourceAccount: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositauthorizedrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/depositauthorizedrequest","title":"DepositAuthorizedRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/depositauthorized","title":"let depositAuthorized: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/destinationaccount","title":"let destinationAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/sourceaccount","title":"let sourceAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/depositauthorizedresponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/depositauthorizedresponse","title":"DepositAuthorizedResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/feerequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/feerequest\/init(id:apiversion:)","title":"init(id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/feerequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/feerequest","title":"FeeRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/feeresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/feeresponse\/currentledgersize","title":"let currentLedgerSize: String","type":"property"},{"path":"\/documentation\/xrplswift\/feeresponse\/currentqueuesize","title":"let currentQueueSize: String","type":"property"},{"path":"\/documentation\/xrplswift\/feeresponse\/drops","title":"let drops: Drops","type":"property"},{"path":"\/documentation\/xrplswift\/feeresponse\/expectedledgersize","title":"let expectedLedgerSize: String","type":"property"},{"path":"\/documentation\/xrplswift\/feeresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/feeresponse\/levels","title":"let levels: Levels","type":"property"},{"path":"\/documentation\/xrplswift\/feeresponse\/maxqueuesize","title":"let maxQueueSize: String","type":"property"}],"path":"\/documentation\/xrplswift\/feeresponse","title":"FeeResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/init(account:id:apiversion:strict:hotwallet:ledgerhash:ledgerindex:)","title":"init(account: String, id: Int?, apiVersion: Int?, strict: Bool?, hotwallet: String?, ledgerHash: String?, ledgerIndex: LedgerIndex?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/hotwallet","title":"let hotwallet: String?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/strict","title":"let strict: Bool?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/gatewaybalancesrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/gatewaybalancesrequest","title":"GatewayBalancesRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/assets","title":"let assets: BaseBalance?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/balances","title":"let balances: BaseBalance?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/obligations","title":"let obligations: BaseCurrency?","type":"property"},{"path":"\/documentation\/xrplswift\/gatewaybalancesresponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/gatewaybalancesresponse","title":"GatewayBalancesResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/accounts","title":"let accounts: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/binary","title":"let binary: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/expand","title":"let expand: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/full","title":"let full: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/ownerfunds","title":"let ownerFunds: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/queue","title":"let queue: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/transactions","title":"let transactions: Bool?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/ledgerrequest","title":"LedgerRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ledgerresponse","title":"LedgerResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerclosedrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/ledgerclosedrequest\/init(id:apiversion:)","title":"init(id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerclosedrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/ledgerclosedrequest","title":"LedgerClosedRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerclosedresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerclosedresponse\/ledgerhash","title":"let ledgerHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerclosedresponse\/ledgerindex","title":"let ledgerIndex: Int","type":"property"}],"path":"\/documentation\/xrplswift\/ledgerclosedresponse","title":"LedgerClosedResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgercurrentrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/ledgercurrentrequest\/init(id:apiversion:)","title":"init(id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgercurrentrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/ledgercurrentrequest","title":"LedgerCurrentRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgercurrentresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgercurrentresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int","type":"property"}],"path":"\/documentation\/xrplswift\/ledgercurrentresponse","title":"LedgerCurrentResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerdatarequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/ledgerdatarequest\/init(id:apiversion:ledgerhash:ledgerindex:binary:limit:marker:)","title":"init(id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?, binary: Bool?, limit: Int?, marker: AnyCodable?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerdatarequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/ledgerdatarequest","title":"LedgerDataRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerdataresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerdataresponse\/ledgerhash","title":"let ledgerHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerdataresponse\/ledgerindex","title":"let ledgerIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerdataresponse\/marker","title":"let marker: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerdataresponse\/state","title":"let state: [State]","type":"property"},{"path":"\/documentation\/xrplswift\/ledgerdataresponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/ledgerdataresponse","title":"LedgerDataResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/manifestrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/manifestrequest\/init(publickey:id:apiversion:)","title":"init(publicKey: String, id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/manifestrequest\/publickey","title":"let publicKey: String","type":"property"}],"path":"\/documentation\/xrplswift\/manifestrequest","title":"ManifestRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/manifestresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/manifestresponse\/details","title":"let details: ManifestDetails?","type":"property"},{"path":"\/documentation\/xrplswift\/manifestresponse\/manifest","title":"let manifest: String?","type":"property"},{"path":"\/documentation\/xrplswift\/manifestresponse\/requested","title":"let requested: String","type":"property"}],"path":"\/documentation\/xrplswift\/manifestresponse","title":"ManifestResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftbuyoffersrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftbuyoffersrequest\/init(nftid:id:apiversion:)","title":"init(nftId: String, id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftbuyoffersrequest\/nftid","title":"let nftId: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftbuyoffersrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/nftbuyoffersrequest","title":"NFTBuyOffersRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftbuyoffersresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftbuyoffersresponse\/nftid","title":"let nftId: String","type":"property"},{"path":"\/documentation\/xrplswift\/nftbuyoffersresponse\/offers","title":"let offers: [NFTOffer]","type":"property"}],"path":"\/documentation\/xrplswift\/nftbuyoffersresponse","title":"NFTBuyOffersResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftselloffersrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftselloffersrequest\/init(nftid:id:apiversion:)","title":"init(nftId: String, id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftselloffersrequest\/nftid","title":"let nftId: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftselloffersrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/nftselloffersrequest","title":"NFTSellOffersRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftselloffersresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftselloffersresponse\/nftid","title":"let nftId: String","type":"property"},{"path":"\/documentation\/xrplswift\/nftselloffersresponse\/offers","title":"let offers: [NFTOffer]","type":"property"}],"path":"\/documentation\/xrplswift\/nftselloffersresponse","title":"NFTSellOffersResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/init(account:role:id:apiversion:transactions:limit:ledgerhash:ledgerindex:)","title":"init(account: String, role: String, id: Int?, apiVersion: Int?, transactions: Bool?, limit: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/role","title":"let role: String","type":"property"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/transactions","title":"let transactions: Bool?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/noripplecheckrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/noripplecheckrequest","title":"NoRippleCheckRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/noripplecheckresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/noripplecheckresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/noripplecheckresponse\/problems","title":"let problems: [String]","type":"property"},{"path":"\/documentation\/xrplswift\/noripplecheckresponse\/transactions","title":"let transactions: [Transaction]","type":"property"}],"path":"\/documentation\/xrplswift\/noripplecheckresponse","title":"NoRippleCheckResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pingrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/pingrequest\/init(id:apiversion:)","title":"init(id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pingrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/pingrequest","title":"PingRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pingresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pingresponse\/role","title":"let role: String?","type":"property"},{"path":"\/documentation\/xrplswift\/pingresponse\/unlimited","title":"let unlimited: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/pingresponse","title":"PingResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/randomrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/randomrequest\/init(id:apiversion:)","title":"init(id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/randomrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/randomrequest","title":"RandomRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/randomresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/randomresponse\/random","title":"let random: String","type":"property"}],"path":"\/documentation\/xrplswift\/randomresponse","title":"RandomResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/init(sourceaccount:destinationaccount:destinationamount:id:apiversion:sendmax:sourcecurrencies:ledgerhash:ledgerindex:)","title":"init(sourceAccount: String, destinationAccount: String, destinationAmount: Amount, id: Int?, apiVersion: Int?, sendMax: Amount?, sourceCurrencies: SourceCurrencyAmount?, ledgerHash: String?, ledgerIndex: LedgerIndex?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/destinationaccount","title":"let destinationAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/destinationamount","title":"let destinationAmount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/sendmax","title":"let sendMax: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/sourceaccount","title":"let sourceAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindrequest\/sourcecurrencies","title":"let sourceCurrencies: SourceCurrencyAmount?","type":"property"}],"path":"\/documentation\/xrplswift\/ripplepathfindrequest","title":"RipplePathFindRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/alternatives","title":"let alternatives: [PathOption]","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/destinationaccount","title":"let destinationAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/destinationamount","title":"let destinationAmount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/destinationcurrencies","title":"let destinationCurrencies: [String]","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/fullreply","title":"let fullReply: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/id","title":"let id: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/ledgercurrentindex","title":"let ledgerCurrentIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/sourceaccount","title":"let sourceAccount: String","type":"property"},{"path":"\/documentation\/xrplswift\/ripplepathfindresponse\/validated","title":"let validated: Bool","type":"property"}],"path":"\/documentation\/xrplswift\/ripplepathfindresponse","title":"RipplePathFindResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverinforequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/serverinforequest\/init(id:apiversion:)","title":"init(id: Int?, apiVersion: Int?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverinforequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/serverinforequest","title":"ServerInfoRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverinforesponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverinforesponse\/info","title":"let info: ServerInfoWrapper","type":"property"}],"path":"\/documentation\/xrplswift\/serverinforesponse","title":"ServerInfoResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverstaterequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/serverstaterequest\/init(id:apiversion:)","title":"init(id: Int?, apiVersion: Int?)","type":"init"}],"path":"\/documentation\/xrplswift\/serverstaterequest","title":"ServerStateRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverstateresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverstateresponse\/state","title":"let state: ServerInfoWrapper","type":"property"}],"path":"\/documentation\/xrplswift\/serverstateresponse","title":"ServerStateResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/submitrequest\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/submitrequest\/init(txblob:failhard:)","title":"init(txBlob: String, failHard: Bool?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitrequest\/failhard","title":"let failHard: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/submitrequest\/txblob","title":"let txBlob: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/submitrequest","title":"SubmitRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitresponse\/accepted","title":"let accepted: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/accountsequenceavailable","title":"let accountSequenceAvailable: Int","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/accountsequencenext","title":"let accountSequenceNext: Int","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/applied","title":"let applied: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/broadcast","title":"let broadcast: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/engineresult","title":"let engineResult: String","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/engineresultcode","title":"let engineResultCode: Int","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/engineresultmessage","title":"let engineResultMessage: String","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/kept","title":"let kept: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/openledgercost","title":"let openLedgerCost: String","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/queued","title":"let queued: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/txblob","title":"let txBlob: String","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/txjson","title":"let txJson: Transaction","type":"property"},{"path":"\/documentation\/xrplswift\/submitresponse\/validatedledgerindex","title":"let validatedLedgerIndex: Int","type":"property"}],"path":"\/documentation\/xrplswift\/submitresponse","title":"SubmitResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitmultisignedrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/submitmultisignedrequest\/init(txjson:id:apiversion:failhard:)","title":"init(txJson: Transaction, id: Int?, apiVersion: Int?, failHard: Bool?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitmultisignedrequest\/failhard","title":"let failHard: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/submitmultisignedrequest\/txjson","title":"let txJson: Transaction","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitmultisignedrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/submitmultisignedrequest","title":"SubmitMultisignedRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitmultisignedresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitmultisignedresponse\/engineresult","title":"let engineResult: String","type":"property"},{"path":"\/documentation\/xrplswift\/submitmultisignedresponse\/engineresultcode","title":"let engineResultCode: Int","type":"property"},{"path":"\/documentation\/xrplswift\/submitmultisignedresponse\/engineresultmessage","title":"let engineResultMessage: String","type":"property"},{"path":"\/documentation\/xrplswift\/submitmultisignedresponse\/txblob","title":"let txBlob: String","type":"property"},{"path":"\/documentation\/xrplswift\/submitmultisignedresponse\/txjson","title":"let txJson: Transaction","type":"property"}],"path":"\/documentation\/xrplswift\/submitmultisignedresponse","title":"SubmitMultisignedResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionentryrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/transactionentryrequest\/init(txhash:id:apiversion:ledgerhash:ledgerindex:)","title":"init(txHash: String, id: Int?, apiVersion: Int?, ledgerHash: String?, ledgerIndex: LedgerIndex?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionentryrequest\/ledgerhash","title":"let ledgerHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/transactionentryrequest\/ledgerindex","title":"let ledgerIndex: LedgerIndex?","type":"property"},{"path":"\/documentation\/xrplswift\/transactionentryrequest\/txhash","title":"let txHash: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionentryrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/transactionentryrequest","title":"TransactionEntryRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionentryresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionentryresponse\/ledgerhash","title":"let ledgerHash: String","type":"property"},{"path":"\/documentation\/xrplswift\/transactionentryresponse\/ledgerindex","title":"let ledgerIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/transactionentryresponse\/metadata","title":"let metadata: TransactionMetadata","type":"property"},{"path":"\/documentation\/xrplswift\/transactionentryresponse\/txjson","title":"let txJson: Transaction","type":"property"}],"path":"\/documentation\/xrplswift\/transactionentryresponse","title":"TransactionEntryResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/txrequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/txrequest\/init(transaction:id:apiversion:binary:minledger:maxledger:)","title":"init(transaction: String, id: Int?, apiVersion: Int?, binary: Bool?, minLedger: Int?, maxLedger: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/txrequest\/binary","title":"var binary: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/txrequest\/maxledger","title":"var maxLedger: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/txrequest\/minledger","title":"var minLedger: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/txrequest\/transaction","title":"var transaction: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/txrequest\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/txrequest","title":"TxRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/txresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/txresponse\/date","title":"let date: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/txresponse\/hash","title":"let hash: String","type":"property"},{"path":"\/documentation\/xrplswift\/txresponse\/ledgerindex","title":"let ledgerIndex: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/txresponse\/meta","title":"let meta: TransactionMetadata?","type":"property"},{"path":"\/documentation\/xrplswift\/txresponse\/searchedall","title":"let searchedAll: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/txresponse\/validated","title":"let validated: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/txresponse","title":"TxResponse","type":"class"},{"title":"Xrpl Models: Transactions","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountdelete\/init(destination:destinationtag:)","title":"init(destination: String, destinationTag: Int?)","type":"init"},{"path":"\/documentation\/xrplswift\/accountdelete\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountdelete\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountdelete\/destination","title":"var destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountdelete\/destinationtag","title":"var destinationTag: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountdelete\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountdelete","title":"AccountDelete","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountset\/init(clearflag:setflag:domain:emailhash:messagekey:transferrate:ticksize:nftokenminter:)","title":"init(clearFlag: AccountSetAsfFlags?, setFlag: AccountSetAsfFlags?, domain: String?, emailHash: String?, messageKey: Int?, transferRate: Int?, tickSize: Int?, nfTokenMinter: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/accountset\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/accountset\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountset\/clearflag","title":"var clearFlag: AccountSetAsfFlags?","type":"property"},{"path":"\/documentation\/xrplswift\/accountset\/domain","title":"var domain: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountset\/emailhash","title":"var emailHash: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountset\/messagekey","title":"var messageKey: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountset\/nftokenminter","title":"var nfTokenMinter: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountset\/setflag","title":"var setFlag: AccountSetAsfFlags?","type":"property"},{"path":"\/documentation\/xrplswift\/accountset\/ticksize","title":"var tickSize: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountset\/transferrate","title":"var transferRate: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountset\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountset","title":"AccountSet","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcancel\/init(checkid:)","title":"init(checkId: String)","type":"init"},{"path":"\/documentation\/xrplswift\/checkcancel\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/checkcancel\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcancel\/checkid","title":"let checkId: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcancel\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/checkcancel","title":"CheckCancel","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcash\/init(checkid:amount:delivermin:)","title":"init(checkId: String, amount: Amount, deliverMin: Amount)","type":"init"},{"path":"\/documentation\/xrplswift\/checkcash\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/checkcash\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcash\/amount","title":"let amount: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/checkcash\/checkid","title":"let checkId: String","type":"property"},{"path":"\/documentation\/xrplswift\/checkcash\/delivermin","title":"let deliverMin: Amount?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcash\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/checkcash","title":"CheckCash","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositpreauth\/init(authorize:unauthorize:)","title":"init(authorize: String?, unauthorize: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/depositpreauth\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/depositpreauth\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositpreauth\/authorize","title":"let authorize: String?","type":"property"},{"path":"\/documentation\/xrplswift\/depositpreauth\/unauthorize","title":"let unauthorize: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/depositpreauth\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/depositpreauth","title":"DepositPreauth","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowcancel\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/escrowcancel\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/escrowcancel\/init(owner:offersequence:)","title":"init(owner: String, offerSequence: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowcancel\/offersequence","title":"var offerSequence: Int","type":"property"},{"path":"\/documentation\/xrplswift\/escrowcancel\/owner","title":"var owner: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowcancel\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/escrowcancel","title":"EscrowCancel","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowcreate\/init(amount:destination:destinationtag:cancelafter:finishafter:condition:)","title":"init(amount: Amount, destination: String, destinationTag: Int?, cancelAfter: Int?, finishAfter: Int?, condition: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/escrowcreate\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/escrowcreate\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowcreate\/amount","title":"let amount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/escrowcreate\/cancelafter","title":"let cancelAfter: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/escrowcreate\/condition","title":"let condition: String?","type":"property"},{"path":"\/documentation\/xrplswift\/escrowcreate\/destination","title":"let destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/escrowcreate\/destinationtag","title":"let destinationTag: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/escrowcreate\/finishafter","title":"let finishAfter: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowcreate\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/escrowcreate","title":"EscrowCreate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowfinish\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/escrowfinish\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/escrowfinish\/init(owner:offersequence:condition:fulfillment:)","title":"init(owner: String, offerSequence: Int, condition: String?, fulfillment: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowfinish\/condition","title":"let condition: String?","type":"property"},{"path":"\/documentation\/xrplswift\/escrowfinish\/fulfillment","title":"let fulfillment: String?","type":"property"},{"path":"\/documentation\/xrplswift\/escrowfinish\/offersequence","title":"let offerSequence: Int","type":"property"},{"path":"\/documentation\/xrplswift\/escrowfinish\/owner","title":"let owner: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/escrowfinish\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/escrowfinish","title":"EscrowFinish","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenacceptoffer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokenacceptoffer\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokenacceptoffer\/init(nftokenselloffer:nftokenbuyoffer:nftokenbrokerfee:)","title":"init(nftokenSellOffer: String?, nftokenBuyOffer: String?, nftokenBrokerFee: Amount?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenacceptoffer\/nftokenbrokerfee","title":"var nftokenBrokerFee: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/nftokenacceptoffer\/nftokenbuyoffer","title":"var nftokenBuyOffer: String?","type":"property"},{"path":"\/documentation\/xrplswift\/nftokenacceptoffer\/nftokenselloffer","title":"var nftokenSellOffer: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenacceptoffer\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/nftokenacceptoffer","title":"NFTokenAcceptOffer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenburn\/init(account:nftokenid:owner:)","title":"init(account: String, nftokenId: String, owner: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/nftokenburn\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokenburn\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenburn\/nftokenid","title":"let nftokenId: String","type":"property"},{"path":"\/documentation\/xrplswift\/nftokenburn\/owner","title":"let owner: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenburn\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/nftokenburn","title":"NFTokenBurn","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencanceloffer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokencanceloffer\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokencanceloffer\/init(nftokenoffers:)","title":"init(nftokenOffers: [String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencanceloffer\/nftokenoffers","title":"let nftokenOffers: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencanceloffer\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/nftokencanceloffer","title":"NFTokenCancelOffer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/init(nftokenid:amount:owner:expiration:destination:)","title":"init(nftokenId: String, amount: Amount, owner: String?, expiration: Int?, destination: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/amount","title":"var amount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/destination","title":"var destination: String?","type":"property"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/expiration","title":"var expiration: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/nftokenid","title":"var nftokenId: String","type":"property"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/owner","title":"var owner: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateoffer\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/nftokencreateoffer","title":"NFTokenCreateOffer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmint\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokenmint\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/nftokenmint\/init(nftokentaxon:issuer:transferfee:uri:)","title":"init(nftokenTaxon: Int, issuer: String?, transferFee: Int?, uri: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmint\/issuer","title":"let issuer: String?","type":"property"},{"path":"\/documentation\/xrplswift\/nftokenmint\/nftokentaxon","title":"let nftokenTaxon: Int","type":"property"},{"path":"\/documentation\/xrplswift\/nftokenmint\/transferfee","title":"let transferFee: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/nftokenmint\/uri","title":"let uri: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmint\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/nftokenmint","title":"NFTokenMint","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercancel\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/offercancel\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/offercancel\/init(offersequence:)","title":"init(offerSequence: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercancel\/offersequence","title":"let offerSequence: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercancel\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/offercancel","title":"OfferCancel","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreate\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/offercreate\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/offercreate\/init(takergets:takerpays:expiration:offersequence:)","title":"init(takerGets: Amount, takerPays: Amount, expiration: Int?, offerSequence: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreate\/expiration","title":"let expiration: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/offercreate\/offersequence","title":"let offerSequence: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/offercreate\/takergets","title":"let takerGets: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/offercreate\/takerpays","title":"let takerPays: Amount","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreate\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/offercreate","title":"OfferCreate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/payment\/init(amount:destination:destinationtag:invoiceid:paths:sendmax:delivermin:)","title":"init(amount: Amount, destination: String, destinationTag: Int?, invoiceId: String?, paths: [Path]?, sendMax: Amount?, deliverMin: Amount?)","type":"init"},{"path":"\/documentation\/xrplswift\/payment\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/payment\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/payment\/amount","title":"let amount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/payment\/delivermin","title":"let deliverMin: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/payment\/destination","title":"let destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/payment\/destinationtag","title":"let destinationTag: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/payment\/invoiceid","title":"let invoiceId: String?","type":"property"},{"path":"\/documentation\/xrplswift\/payment\/paths","title":"let paths: [Path]?","type":"property"},{"path":"\/documentation\/xrplswift\/payment\/sendmax","title":"let sendMax: Amount?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/payment\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/payment","title":"Payment","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/init(channel:balance:amount:signature:publickey:)","title":"init(channel: String, balance: Amount?, amount: Amount?, signature: String?, publicKey: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/amount","title":"var amount: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/balance","title":"var balance: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/channel","title":"var channel: String","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/publickey","title":"var publicKey: String?","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/signature","title":"var signature: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaim\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/paymentchannelclaim","title":"PaymentChannelClaim","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/init(amount:destination:settledelay:publickey:cancelafter:destinationtag:)","title":"init(amount: Amount, destination: String, settleDelay: Int, publicKey: String, cancelAfter: Int?, destinationTag: Int?)","type":"init"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/amount","title":"var amount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/cancelafter","title":"var cancelAfter: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/destination","title":"var destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/destinationtag","title":"var destinationTag: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/publickey","title":"var publicKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/settledelay","title":"var settleDelay: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelcreate\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/paymentchannelcreate","title":"PaymentChannelCreate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelfund\/init(channel:amount:expiration:)","title":"init(channel: String, amount: Amount, expiration: Int?)","type":"init"},{"path":"\/documentation\/xrplswift\/paymentchannelfund\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/paymentchannelfund\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelfund\/amount","title":"var amount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelfund\/channel","title":"var channel: String","type":"property"},{"path":"\/documentation\/xrplswift\/paymentchannelfund\/expiration","title":"var expiration: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelfund\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/paymentchannelfund","title":"PaymentChannelFund","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/setregularkey\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/setregularkey\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/setregularkey\/init(regularkey:)","title":"init(regularKey: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/setregularkey\/regularkey","title":"var regularKey: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/setregularkey\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/setregularkey","title":"SetRegularKey","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistset\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/signerlistset\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/signerlistset\/init(signerquorum:signerentries:)","title":"init(signerQuorum: Int, signerEntries: [SignerEntry])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistset\/signerentries","title":"var signerEntries: [SignerEntry]","type":"property"},{"path":"\/documentation\/xrplswift\/signerlistset\/signerquorum","title":"var signerQuorum: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistset\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/signerlistset","title":"SignerListSet","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ticketcreate\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/ticketcreate\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/ticketcreate\/init(ticketcount:)","title":"init(ticketCount: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ticketcreate\/ticketcount","title":"var ticketCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ticketcreate\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/ticketcreate","title":"TicketCreate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustset\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/trustset\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/trustset\/init(limitamount:qualityin:qualityout:flags:)","title":"init(limitAmount: IssuedCurrencyAmount, qualityIn: Int?, qualityOut: Int?, flags: TrustSetFlagsInterface)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustset\/limitamount","title":"var limitAmount: IssuedCurrencyAmount","type":"property"},{"path":"\/documentation\/xrplswift\/trustset\/qualityin","title":"var qualityIn: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/trustset\/qualityout","title":"var qualityOut: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustset\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/trustset","title":"TrustSet","type":"class"},{"title":"Xrpl Wallet","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/wallet\/init(publickey:privatekey:masteraddress:seed:)","title":"init(publicKey: String, privateKey: String, masterAddress: String?, seed: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/wallet\/classicaddress","title":"let classicAddress: String","type":"property"},{"path":"\/documentation\/xrplswift\/wallet\/privatekey","title":"let privateKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/wallet\/publickey","title":"let publicKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/wallet\/seed","title":"let seed: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/wallet\/address()","title":"func address() -> String","type":"method"},{"path":"\/documentation\/xrplswift\/wallet\/getxaddress(tag:istest:)","title":"func getXAddress(tag: Int?, isTest: Bool) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/wallet\/sign(transaction:multisign:signingfor:)-3ar8m","title":"func sign(transaction: [String : AnyObject], multisign: Bool, signingFor: String?) throws -> SignatureResult","type":"method"},{"path":"\/documentation\/xrplswift\/wallet\/sign(transaction:multisign:signingfor:)-3atcu","title":"func sign(transaction: Transaction, multisign: Bool, signingFor: String?) throws -> SignatureResult","type":"method"},{"path":"\/documentation\/xrplswift\/wallet\/verifytransaction(signedtransaction:)","title":"func verifyTransaction(signedTransaction: String) -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/wallet\/fromentropy(entropy:opts:)","title":"static func fromEntropy(entropy: Entropy, opts: SeedOptions) -> Wallet","type":"method"},{"path":"\/documentation\/xrplswift\/wallet\/frommnemonic(mnemonic:opts:)","title":"static func fromMnemonic(mnemonic: String, opts: MnemonicOptions) throws -> Wallet","type":"method"},{"path":"\/documentation\/xrplswift\/wallet\/fromseed(seed:masteraddress:)","title":"static func fromSeed(seed: String, masterAddress: String?) -> Wallet","type":"method"},{"path":"\/documentation\/xrplswift\/wallet\/generate(algorithm:)","title":"static func generate(algorithm: AlgorithmType) -> Wallet","type":"method"}],"path":"\/documentation\/xrplswift\/wallet","title":"Wallet","type":"class"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/walletsigner\/authorizechannel(wallet:channelid:amount:)","title":"static func authorizeChannel(wallet: Wallet, channelId: String, amount: String) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/walletsigner\/multisign(transactions:)","title":"static func multisign(transactions: [Transaction]) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/walletsigner\/verifysignature(tx:)-3gd8l","title":"static func verifySignature(tx: String) -> Bool","type":"method"},{"path":"\/documentation\/xrplswift\/walletsigner\/verifysignature(tx:)-mtjk","title":"static func verifySignature(tx: Transaction) -> Bool","type":"method"}],"path":"\/documentation\/xrplswift\/walletsigner","title":"WalletSigner","type":"class"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountoffer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountoffer\/expiration","title":"let expiration: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffer\/flags","title":"let flags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffer\/quality","title":"let quality: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffer\/seq","title":"let seq: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffer\/takergets","title":"let takerGets: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/accountoffer\/takerpays","title":"let takerPays: Amount","type":"property"}],"path":"\/documentation\/xrplswift\/accountoffer","title":"AccountOffer","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baserequest\/==(_:_:)","title":"static func == (BaseRequest, BaseRequest) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baserequest\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/baserequest\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/baserequest\/init(id:command:apiversion:data:)","title":"init(id: Int?, command: String?, apiVersion: Int?, data: TestData?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baserequest\/apiversion","title":"var apiVersion: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/baserequest\/command","title":"var command: String?","type":"property"},{"path":"\/documentation\/xrplswift\/baserequest\/data","title":"var data: TestData?","type":"property"},{"path":"\/documentation\/xrplswift\/baserequest\/id","title":"var id: Int?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baserequest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/baserequest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/baserequest","title":"BaseRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseresponse\/init(id:status:type:result:)","title":"init(id: Int, status: String?, type: String, result: T?)","type":"init"},{"path":"\/documentation\/xrplswift\/baseresponse\/init(response:result:)","title":"init(response: RippleBaseResponse, result: T?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseresponse\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/xrplswift\/baseresponse\/result","title":"var result: T?","type":"property"},{"path":"\/documentation\/xrplswift\/baseresponse\/status","title":"var status: String?","type":"property"},{"path":"\/documentation\/xrplswift\/baseresponse\/type","title":"var type: String","type":"property"}],"path":"\/documentation\/xrplswift\/baseresponse","title":"BaseResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basesigner\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basesigner\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/basesigner\/signingpubkey","title":"let signingPubKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/basesigner\/txnsignature","title":"let txnSignature: String","type":"property"}],"path":"\/documentation\/xrplswift\/basesigner","title":"BaseSigner","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basesignerentry\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basesignerentry\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/basesignerentry\/signerweight","title":"let signerWeight: Int","type":"property"}],"path":"\/documentation\/xrplswift\/basesignerentry","title":"BaseSignerEntry","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basetransaction\/init(account:transactiontype:fee:sequence:accounttxnid:flags:lastledgersequence:memos:signers:sourcetag:signingpubkey:ticketsequence:txnsignature:)","title":"init(account: String, transactionType: String, fee: String?, sequence: Int?, accountTxnId: String?, flags: Int?, lastLedgerSequence: Int?, memos: [MemoWrapper]?, signers: [Signer]?, sourceTag: Int?, signingPubKey: String?, ticketSequence: Int?, txnSignature: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/basetransaction\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/basetransaction\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basetransaction\/account","title":"var account: String","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/accounttxnid","title":"var accountTxnId: String?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/fee","title":"var fee: String?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/flags","title":"var flags: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/lastledgersequence","title":"var lastLedgerSequence: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/memos","title":"var memos: [MemoWrapper]?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/sequence","title":"var sequence: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/signers","title":"var signers: [Signer]?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/signingpubkey","title":"var signingPubKey: String?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/sourcetag","title":"var sourceTag: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/ticketsequence","title":"var ticketSequence: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/transactiontype","title":"var transactionType: String","type":"property"},{"path":"\/documentation\/xrplswift\/basetransaction\/txnsignature","title":"var txnSignature: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basetransaction\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/basetransaction","title":"BaseTransaction","type":"class"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/create(entropy:language:)","title":"static func create(entropy: Data, language: WordList) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/create(strength:language:)","title":"static func create(strength: Strength, language: WordList) throws -> String","type":"method"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/createseed(mnemonic:withpassphrase:)","title":"static func createSeed(mnemonic: String, withPassphrase: String) -> Data","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/hight","title":"case hight","type":"case"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/normal","title":"case normal","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/bip39mnemonic\/strength","title":"Bip39Mnemonic.Strength","type":"enum"}],"path":"\/documentation\/xrplswift\/bip39mnemonic","title":"Bip39Mnemonic","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bookoffer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/bookoffer\/ownerfunds","title":"let ownerFunds: String?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffer\/quality","title":"let quality: String?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffer\/takergetsfunded","title":"let takerGetsFunded: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/bookoffer\/takerpaysfunded","title":"let takerPaysFunded: Amount?","type":"property"}],"path":"\/documentation\/xrplswift\/bookoffer","title":"BookOffer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcreate\/init(destination:sendmax:destinationtag:expiration:invoiceid:)","title":"init(destination: String, sendMax: Amount, destinationTag: Int?, expiration: Int?, invoiceId: String?)","type":"init"},{"path":"\/documentation\/xrplswift\/checkcreate\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/checkcreate\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcreate\/destination","title":"let destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/checkcreate\/destinationtag","title":"let destinationTag: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/checkcreate\/expiration","title":"let expiration: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/checkcreate\/invoiceid","title":"let invoiceId: String?","type":"property"},{"path":"\/documentation\/xrplswift\/checkcreate\/sendmax","title":"let sendMax: Amount","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/checkcreate\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/checkcreate","title":"CheckCreate","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/clientoptions\/feecushion","title":"var feeCushion: Double?","type":"property"},{"path":"\/documentation\/xrplswift\/clientoptions\/maxfeexrp","title":"var maxFeeXRP: String?","type":"property"}],"path":"\/documentation\/xrplswift\/clientoptions","title":"ClientOptions","type":"class"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/codablehelper\/decode(_:from:)","title":"class func decode<T>(T.Type, from: Data) -> (decodableObj: T?, error: Error?)","type":"method"}],"path":"\/documentation\/xrplswift\/codablehelper","title":"CodableHelper","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/connectionoptions\/authorization","title":"var authorization: String?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/certificate","title":"var certificate: String?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/connectiontimeout","title":"var connectionTimeout: Int","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/headers","title":"var headers: [String : [String : String]]?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/key","title":"var key: String?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/passphrase","title":"var passphrase: String?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/proxy","title":"var proxy: String?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/proxyauthorization","title":"var proxyAuthorization: String?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/timeout","title":"var timeout: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/connectionoptions\/trustedcertificates","title":"var trustedCertificates: [String]?","type":"property"}],"path":"\/documentation\/xrplswift\/connectionoptions","title":"ConnectionOptions","type":"class"},{"path":"\/documentation\/xrplswift\/connectionuseroptions","title":"ConnectionUserOptions","type":"class"},{"path":"\/documentation\/xrplswift\/entropy","title":"Entropy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/errorresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/errorresponse\/apiversion","title":"var apiVersion: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/error","title":"var error: String","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/errorcode","title":"var errorCode: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/errorexception","title":"var errorException: String?","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/errormessage","title":"var errorMessage: String?","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/request","title":"var request: AnyCodable?","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/status","title":"var status: String","type":"property"},{"path":"\/documentation\/xrplswift\/errorresponse\/type","title":"var type: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/errorresponse\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/errorresponse\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/errorresponse","title":"ErrorResponse","type":"class"},{"path":"\/documentation\/xrplswift\/eventemitter","title":"EventEmitter","type":"class"},{"path":"\/documentation\/xrplswift\/fieldidcodec","title":"FieldIdCodec","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/infoledger\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/infoledger\/age","title":"let age: Int","type":"property"},{"path":"\/documentation\/xrplswift\/infoledger\/basefeexrp","title":"let baseFeeXrp: Double","type":"property"},{"path":"\/documentation\/xrplswift\/infoledger\/hash","title":"let hash: String","type":"property"},{"path":"\/documentation\/xrplswift\/infoledger\/reservebasexrp","title":"let reserveBaseXrp: Int","type":"property"},{"path":"\/documentation\/xrplswift\/infoledger\/reserveincxrp","title":"let reserveIncXrp: Int","type":"property"},{"path":"\/documentation\/xrplswift\/infoledger\/seq","title":"let seq: Int","type":"property"}],"path":"\/documentation\/xrplswift\/infoledger","title":"InfoLedger","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/jobtype\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/jobtype","title":"JobType","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/authorize","title":"let authorize: String","type":"property"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/flags","title":"var flags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/ledgerentrytype","title":"var ledgerEntryType: String","type":"property"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/ownernode","title":"let ownerNode: String","type":"property"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/previoustxnid","title":"let previousTxnId: String","type":"property"},{"path":"\/documentation\/xrplswift\/lodepositpreauth\/previoustxnlgrseq","title":"let previousTxnLgrSeq: Int","type":"property"}],"path":"\/documentation\/xrplswift\/lodepositpreauth","title":"LODepositPreauth","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lastclosed\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lastclosed\/convergetimes","title":"let convergeTimeS: Double","type":"property"},{"path":"\/documentation\/xrplswift\/lastclosed\/proposers","title":"let proposers: Int","type":"property"}],"path":"\/documentation\/xrplswift\/lastclosed","title":"LastClosed","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/majority\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/majority","title":"Majority","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/manifestdetails\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/manifestdetails\/domain","title":"let domain: String","type":"property"},{"path":"\/documentation\/xrplswift\/manifestdetails\/ephemeralkey","title":"let ephemeralKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/manifestdetails\/masterkey","title":"let masterKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/manifestdetails\/seq","title":"let seq: Int","type":"property"}],"path":"\/documentation\/xrplswift\/manifestdetails","title":"ManifestDetails","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/memo\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/memo\/memodata","title":"let memoData: String?","type":"property"},{"path":"\/documentation\/xrplswift\/memo\/memoformat","title":"let memoFormat: String?","type":"property"},{"path":"\/documentation\/xrplswift\/memo\/memotype","title":"let memoType: String?","type":"property"}],"path":"\/documentation\/xrplswift\/memo","title":"Memo","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/memowrapper\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/memowrapper\/memo","title":"let memo: Memo","type":"property"}],"path":"\/documentation\/xrplswift\/memowrapper","title":"MemoWrapper","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplebaseresponse\/==(_:_:)","title":"static func == (RippleBaseResponse, RippleBaseResponse) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplebaseresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplebaseresponse\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/xrplswift\/ripplebaseresponse\/status","title":"var status: String?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplebaseresponse\/type","title":"var type: String","type":"property"}],"path":"\/documentation\/xrplswift\/ripplebaseresponse","title":"RippleBaseResponse","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/init(_:)-2yfh4","title":"init?(Data)","type":"init"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/init(_:)-49pa8","title":"init?(RippleKeystoreParamsV3)","type":"init"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/init(_:)-4pfvq","title":"init?(String)","type":"init"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/init(privatekey:password:aesmode:)","title":"init?(privateKey: Data, password: String, aesMode: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/addresses","title":"var addresses: [String]?","type":"property"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/ishdkeystore","title":"var isHDKeystore: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/keystoreparams","title":"var keystoreParams: RippleKeystoreParamsV3?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/unsafe_getprivatekeydata(password:account:)","title":"func UNSAFE_getPrivateKeyData(password: String, account: String) throws -> Data","type":"method"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/unsafe_getwallet(password:account:)","title":"func UNSAFE_getWallet(password: String, account: String) throws -> Wallet","type":"method"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/getaddress()","title":"func getAddress() -> String?","type":"method"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/regenerate(oldpassword:newpassword:dklen:n:r:p:)","title":"func regenerate(oldPassword: String, newPassword: String, dkLen: Int, N: Int, R: Int, P: Int) throws","type":"method"},{"path":"\/documentation\/xrplswift\/ripplekeystorev3\/serialize()","title":"func serialize() throws -> Data?","type":"method"}],"path":"\/documentation\/xrplswift\/ripplekeystorev3","title":"RippleKeystoreV3","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplestate\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ripplestate","title":"RippleState","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/amendmentblocked","title":"let amendmentBlocked: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/buildversion","title":"let buildVersion: String","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/closedledger","title":"let closedLedger: InfoLedger?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/completeledgers","title":"let completeLedgers: String","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/hostid","title":"let hostid: String","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/iolatencyms","title":"let ioLatencyMs: Int","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/jqtransoverflow","title":"let jqTransOverflow: String?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/lastclose","title":"let lastClose: LastClosed","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/load","title":"let load: StateLoad?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/loadfactor","title":"var loadFactor: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/loadfactorcluster","title":"let loadFactorCluster: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/loadfactorfeeescalation","title":"let loadFactorFeeEscalation: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/loadfactorfeequeue","title":"var loadFactorFeeQueue: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/loadfactorlocal","title":"let loadFactorLocal: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/loadfactornet","title":"let loadFactorNet: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/loadfactorserver","title":"let loadFactorServer: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/networkledger","title":"var networkLedger: String?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/peers","title":"let peers: Int","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/pubkeynode","title":"let pubkeyNode: String","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/pubkeyvalidator","title":"let pubkeyValidator: String?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/serverstate","title":"let serverState: ServerState","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/serverstatedurationus","title":"let serverStateDurationUs: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/stateaccounting","title":"let stateAccounting: [ServerState : StateAccounting]?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/time","title":"let time: String?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/uptime","title":"let uptime: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/validatedledger","title":"let validatedLedger: InfoLedger?","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/validationquorum","title":"let validationQuorum: Int","type":"property"},{"path":"\/documentation\/xrplswift\/serverinfowrapper\/validatorlistexpires","title":"let validatorListExpires: String?","type":"property"}],"path":"\/documentation\/xrplswift\/serverinfowrapper","title":"ServerInfoWrapper","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/sethook\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/sethook\/init(statekey:namespace:)","title":"init(stateKey: String?, namespace: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/sethook\/namespace","title":"var namespace: String?","type":"property"},{"path":"\/documentation\/xrplswift\/sethook\/statekey","title":"var stateKey: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/sethook\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/sethook","title":"SetHook","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/signer\/init(json:)","title":"init(json: [String : AnyObject]) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signer\/signer","title":"let signer: BaseSigner","type":"property"}],"path":"\/documentation\/xrplswift\/signer","title":"Signer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerentry\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerentry\/signerentry","title":"let signerEntry: BaseSignerEntry","type":"property"}],"path":"\/documentation\/xrplswift\/signerentry","title":"SignerEntry","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/stateaccounting\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/stateaccounting\/durationus","title":"let durationUs: String","type":"property"},{"path":"\/documentation\/xrplswift\/stateaccounting\/transitions","title":"let transitions: Int","type":"property"}],"path":"\/documentation\/xrplswift\/stateaccounting","title":"StateAccounting","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/stateledger\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/stateledger\/age","title":"let age: Int","type":"property"},{"path":"\/documentation\/xrplswift\/stateledger\/basefee","title":"let baseFee: Int","type":"property"},{"path":"\/documentation\/xrplswift\/stateledger\/hash","title":"let hash: String","type":"property"},{"path":"\/documentation\/xrplswift\/stateledger\/reservebase","title":"let reserveBase: Int","type":"property"},{"path":"\/documentation\/xrplswift\/stateledger\/reserveinc","title":"let reserveInc: Int","type":"property"},{"path":"\/documentation\/xrplswift\/stateledger\/seq","title":"let seq: Int","type":"property"}],"path":"\/documentation\/xrplswift\/stateledger","title":"StateLedger","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/stateload\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/stateload\/jobtypes","title":"let jobTypes: [JobType]","type":"property"},{"path":"\/documentation\/xrplswift\/stateload\/threads","title":"let threads: Int","type":"property"}],"path":"\/documentation\/xrplswift\/stateload","title":"StateLoad","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitoptions\/init(autofill:failhard:wallet:)","title":"init(autofill: Bool?, failHard: Bool?, wallet: Wallet)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submitoptions\/autofill","title":"var autofill: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/submitoptions\/failhard","title":"var failHard: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/submitoptions\/wallet","title":"var wallet: Wallet","type":"property"}],"path":"\/documentation\/xrplswift\/submitoptions","title":"SubmitOptions","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/testdata\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/testdata","title":"TestData","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionandmetadata\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionandmetadata\/metadata","title":"let metadata: TransactionMetadata","type":"property"},{"path":"\/documentation\/xrplswift\/transactionandmetadata\/transaction","title":"let transaction: Transaction","type":"property"}],"path":"\/documentation\/xrplswift\/transactionandmetadata","title":"TransactionAndMetadata","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionmetadata\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transactionmetadata\/affectednodes","title":"var affectedNodes: [Node]?","type":"property"},{"path":"\/documentation\/xrplswift\/transactionmetadata\/deliveredamount","title":"var deliveredAmount: Amount?","type":"property"},{"path":"\/documentation\/xrplswift\/transactionmetadata\/transactionindex","title":"var transactionIndex: Int","type":"property"},{"path":"\/documentation\/xrplswift\/transactionmetadata\/transactionresult","title":"var transactionResult: String","type":"property"}],"path":"\/documentation\/xrplswift\/transactionmetadata","title":"TransactionMetadata","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustline\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustline\/account","title":"let account: String","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/authorized","title":"let authorized: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/balance","title":"let balance: String","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/currency","title":"let currency: String","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/freeze","title":"let freeze: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/freezepeer","title":"let freezePeer: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/limit","title":"let limit: String","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/limitpeer","title":"let limitPeer: String","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/noripple","title":"let noRipple: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/noripplepeer","title":"let noRipplePeer: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/peerauthorized","title":"let peerAuthorized: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/qualityin","title":"let qualityIn: Int","type":"property"},{"path":"\/documentation\/xrplswift\/trustline\/qualityout","title":"let qualityOut: Int","type":"property"}],"path":"\/documentation\/xrplswift\/trustline","title":"Trustline","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/urandom\/init()","title":"init() throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/urandom\/bytes(count:)","title":"func bytes(count: Int) throws -> [UInt8]","type":"method"}],"path":"\/documentation\/xrplswift\/urandom","title":"URandom","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/abstractripplekeystore\/addresses","title":"var addresses: [String]?","type":"property"},{"path":"\/documentation\/xrplswift\/abstractripplekeystore\/ishdkeystore","title":"var isHDKeystore: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/abstractripplekeystore\/unsafe_getprivatekeydata(password:account:)","title":"func UNSAFE_getPrivateKeyData(password: String, account: String) throws -> Data","type":"method"}],"path":"\/documentation\/xrplswift\/abstractripplekeystore","title":"AbstractRippleKeystore","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/connected()","title":"func connected()","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/consensusphase(consensus:)","title":"func consensusPhase(consensus: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/disconnected(code:)","title":"func disconnected(code: Int)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/error(code:message:data:)","title":"func error(code: Int, message: Any, data: Data)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/ledgerclosed(ledger:)","title":"func ledgerClosed(ledger: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/manifestreceived(manifest:)","title":"func manifestReceived(manifest: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/pathfind(path:)","title":"func pathFind(path: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/peerstatuschange(status:)","title":"func peerStatusChange(status: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/transaction(tx:)","title":"func transaction(tx: Any)","type":"method"},{"path":"\/documentation\/xrplswift\/connectiondelegate\/validationreceived(validation:)","title":"func validationReceived(validation: Any)","type":"method"}],"path":"\/documentation\/xrplswift\/connectiondelegate","title":"ConnectionDelegate","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hashesnode\/additem(tag:node:)","title":"func addItem(tag: String, node: HashesNode) throws","type":"method"},{"path":"\/documentation\/xrplswift\/hashesnode\/hash()","title":"func hash() throws -> String","type":"method"}],"path":"\/documentation\/xrplswift\/hashesnode","title":"HashesNode","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplwebsocket\/delegate","title":"var delegate: XRPLWebSocketDelegate?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplwebsocket\/connect(host:path:)","title":"func connect(host: String, path: String)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocket\/disconnect()","title":"func disconnect()","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocket\/send(data:)","title":"func send(data: Data)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocket\/send(text:)","title":"func send(text: String)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocket\/subscribe(account:)","title":"func subscribe(account: String)","type":"method"}],"path":"\/documentation\/xrplswift\/xrplwebsocket","title":"XRPLWebSocket","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplwebsocketdelegate\/onconnected(connection:)","title":"func onConnected(connection: XRPLWebSocket)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocketdelegate\/ondisconnected(connection:error:)","title":"func onDisconnected(connection: XRPLWebSocket, error: Error?)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocketdelegate\/onerror(connection:error:)","title":"func onError(connection: XRPLWebSocket, error: Error)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocketdelegate\/onresponse(connection:response:)","title":"func onResponse(connection: XRPLWebSocket, response: BaseResponse<Any>)","type":"method"},{"path":"\/documentation\/xrplswift\/xrplwebsocketdelegate\/onstream(connection:object:)","title":"func onStream(connection: XRPLWebSocket, object: NSDictionary)","type":"method"}],"path":"\/documentation\/xrplswift\/xrplwebsocketdelegate","title":"XRPLWebSocketDelegate","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplclientdelegate\/submit(connection:)","title":"func submit(connection: XRPLWebSocket)","type":"method"}],"path":"\/documentation\/xrplswift\/xrplclientdelegate","title":"XrplClientDelegate","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/rkeypairs\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/rkeypairs\/accountid","title":"var accountID: [UInt8]","type":"property"},{"path":"\/documentation\/xrplswift\/rkeypairs\/address","title":"var address: String","type":"property"},{"path":"\/documentation\/xrplswift\/rkeypairs\/privatekey","title":"var privateKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/rkeypairs\/publickey","title":"var publicKey: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/rkeypairs\/decodeseed(publickey:)","title":"static func decodeSeed(publicKey: String) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/rkeypairs\/deriveaddress(publickey:)","title":"static func deriveAddress(publicKey: String) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/rkeypairs\/derivekeypair()","title":"static func deriveKeypair() -> KeyPair","type":"method"},{"path":"\/documentation\/xrplswift\/rkeypairs\/derivenodeaddress(publickey:)","title":"static func deriveNodeAddress(publicKey: String) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/rkeypairs\/generateseed(options:)","title":"static func generateSeed(options: KeypairsOptions?) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/rkeypairs\/sign(message:)","title":"static func sign(message: [UInt8]) -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/rkeypairs\/verify(signature:message:publickey:)","title":"static func verify(signature: [UInt8], message: [UInt8], publicKey: String) -> Bool","type":"method"}],"path":"\/documentation\/xrplswift\/rkeypairs","title":"rKeypairs","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountnftoken\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountnftoken\/flags","title":"let flags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftoken\/issuer","title":"let issuer: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftoken\/nftokenid","title":"let nfTokenID: String","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftoken\/nftokentaxon","title":"let nfTokenTaxon: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftoken\/nftserial","title":"let nftSerial: Int","type":"property"},{"path":"\/documentation\/xrplswift\/accountnftoken\/uri","title":"let uri: String?","type":"property"}],"path":"\/documentation\/xrplswift\/accountnftoken","title":"AccountNFToken","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountrootnodefield\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountrootnodefield\/account","title":"var account: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountrootnodefield\/balance","title":"var balance: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accountrootnodefield\/flags","title":"var flags: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountrootnodefield\/ownercount","title":"var ownerCount: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/accountrootnodefield\/sequence","title":"var sequence: Int?","type":"property"}],"path":"\/documentation\/xrplswift\/accountrootnodefield","title":"AccountRootNodeField","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accounttransaction\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accounttransaction\/meta","title":"let meta: TransactionMetadata","type":"property"},{"path":"\/documentation\/xrplswift\/accounttransaction\/tx","title":"let tx: Transaction?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttransaction\/txblob","title":"let txBlob: String?","type":"property"},{"path":"\/documentation\/xrplswift\/accounttransaction\/validated","title":"let validated: Bool","type":"property"}],"path":"\/documentation\/xrplswift\/accounttransaction","title":"AccountTransaction","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/balance\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/balance\/currency","title":"let currency: String","type":"property"},{"path":"\/documentation\/xrplswift\/balance\/value","title":"let value: String","type":"property"}],"path":"\/documentation\/xrplswift\/balance","title":"Balance","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basebalance\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basebalance\/balances","title":"let balances: [String : [Balance]]","type":"property"}],"path":"\/documentation\/xrplswift\/basebalance","title":"BaseBalance","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basecurrency\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/basecurrency\/currency","title":"let currency: [String : String]","type":"property"}],"path":"\/documentation\/xrplswift\/basecurrency","title":"BaseCurrency","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channel\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/channel","title":"Channel","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelclaim\/init(amount:channel:)","title":"init(amount: Int64, channel: String)","type":"init"},{"path":"\/documentation\/xrplswift\/channelclaim\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelclaim\/amount","title":"var amount: Int64","type":"property"},{"path":"\/documentation\/xrplswift\/channelclaim\/channel","title":"var channel: String","type":"property"}],"path":"\/documentation\/xrplswift\/channelclaim","title":"ChannelClaim","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelsignature\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/xrplswift\/channelsignature\/init(pubkey:sighex:datahex:)","title":"init(pubKey: String, sigHex: String, dataHex: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/channelsignature\/databytes","title":"var dataBytes: [UInt8]","type":"property"},{"path":"\/documentation\/xrplswift\/channelsignature\/datahex","title":"var dataHex: String","type":"property"},{"path":"\/documentation\/xrplswift\/channelsignature\/pubkey","title":"var pubKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/channelsignature\/sigbytes","title":"var sigBytes: [UInt8]","type":"property"},{"path":"\/documentation\/xrplswift\/channelsignature\/sighex","title":"var sigHex: String","type":"property"}],"path":"\/documentation\/xrplswift\/channelsignature","title":"ChannelSignature","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/creatednode\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/creatednode\/creatednode","title":"var createdNode: CreatedNodeData","type":"property"}],"path":"\/documentation\/xrplswift\/creatednode","title":"CreatedNode","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/creatednodedata\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/creatednodedata\/ledgerentrytype","title":"var ledgerEntryType: LedgerEntryType","type":"property"},{"path":"\/documentation\/xrplswift\/creatednodedata\/ledgerindex","title":"var ledgerIndex: String","type":"property"},{"path":"\/documentation\/xrplswift\/creatednodedata\/newfields","title":"var newFields: NewField?","type":"property"}],"path":"\/documentation\/xrplswift\/creatednodedata","title":"CreatedNodeData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/deletednode\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/deletednode\/finalfields","title":"var finalFields: [FinalField]?","type":"property"},{"path":"\/documentation\/xrplswift\/deletednode\/ledgerentrytype","title":"var ledgerEntryType: LedgerEntryType","type":"property"},{"path":"\/documentation\/xrplswift\/deletednode\/ledgerindex","title":"var ledgerIndex: String","type":"property"}],"path":"\/documentation\/xrplswift\/deletednode","title":"DeletedNode","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/derivationpath\/account","title":"let account: UInt32","type":"property"},{"path":"\/documentation\/xrplswift\/derivationpath\/addressindex","title":"let addressIndex: UInt32","type":"property"},{"path":"\/documentation\/xrplswift\/derivationpath\/change","title":"let change: UInt32","type":"property"}],"path":"\/documentation\/xrplswift\/derivationpath","title":"DerivationPath","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/directorynodefield\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/directorynodefield\/owner","title":"var owner: String","type":"property"},{"path":"\/documentation\/xrplswift\/directorynodefield\/rootindex","title":"var rootIndex: String","type":"property"}],"path":"\/documentation\/xrplswift\/directorynodefield","title":"DirectoryNodeField","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/drops\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/drops\/basefee","title":"let baseFee: String","type":"property"},{"path":"\/documentation\/xrplswift\/drops\/medianfee","title":"let medianFee: String","type":"property"},{"path":"\/documentation\/xrplswift\/drops\/minimumfee","title":"let minimumFee: String","type":"property"},{"path":"\/documentation\/xrplswift\/drops\/openledgerfee","title":"let openLedgerFee: String","type":"property"}],"path":"\/documentation\/xrplswift\/drops","title":"Drops","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ed25519\/calcpublickey(secretkey:)","title":"static func calcPublicKey(secretKey: [UInt8]) -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/ed25519\/generatekeypair()","title":"static func generateKeyPair() -> (publicKey: [UInt8], secretKey: [UInt8])","type":"method"},{"path":"\/documentation\/xrplswift\/ed25519\/isvalidkeypair(publickey:secretkey:)","title":"static func isValidKeyPair(publicKey: [UInt8], secretKey: [UInt8]) -> Bool","type":"method"},{"path":"\/documentation\/xrplswift\/ed25519\/sign(message:secretkey:)","title":"static func sign(message: [UInt8], secretKey: [UInt8]) -> [UInt8]","type":"method"},{"path":"\/documentation\/xrplswift\/ed25519\/verify(signature:message:publickey:)","title":"static func verify(signature: [UInt8], message: [UInt8], publicKey: [UInt8]) -> Bool","type":"method"}],"path":"\/documentation\/xrplswift\/ed25519","title":"Ed25519","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/fullclassicaddress\/classicaddress","title":"var classicAddress: String","type":"property"},{"path":"\/documentation\/xrplswift\/fullclassicaddress\/istest","title":"var isTest: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/fullclassicaddress\/tag","title":"var tag: Int?","type":"property"}],"path":"\/documentation\/xrplswift\/fullclassicaddress","title":"FullClassicAddress","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/issuedcurrencyamount\/init(_:)","title":"init([String : AnyObject]) throws","type":"init"},{"path":"\/documentation\/xrplswift\/issuedcurrencyamount\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/issuedcurrencyamount\/currency","title":"var currency: String","type":"property"},{"path":"\/documentation\/xrplswift\/issuedcurrencyamount\/issuer","title":"var issuer: String","type":"property"},{"path":"\/documentation\/xrplswift\/issuedcurrencyamount\/value","title":"var value: String","type":"property"}],"path":"\/documentation\/xrplswift\/issuedcurrencyamount","title":"IssuedCurrencyAmount","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/jsonrpcresponse\/result","title":"var result: T","type":"property"}],"path":"\/documentation\/xrplswift\/jsonrpcresponse","title":"JsonRpcResponse","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/keypair\/privatekey","title":"var privateKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/keypair\/publickey","title":"var publicKey: String","type":"property"}],"path":"\/documentation\/xrplswift\/keypair","title":"KeyPair","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/keypairsoptions\/algorithm","title":"let algorithm: AlgorithmType?","type":"property"},{"path":"\/documentation\/xrplswift\/keypairsoptions\/entropy","title":"let entropy: Entropy?","type":"property"},{"path":"\/documentation\/xrplswift\/keypairsoptions\/isvalidator","title":"let isValidator: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/keypairsoptions","title":"KeypairsOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/levels\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/levels\/medianlevel","title":"let medianLevel: String","type":"property"},{"path":"\/documentation\/xrplswift\/levels\/minimumlevel","title":"let minimumLevel: String","type":"property"},{"path":"\/documentation\/xrplswift\/levels\/openledgerlevel","title":"let openLedgerLevel: String","type":"property"},{"path":"\/documentation\/xrplswift\/levels\/referencelevel","title":"let referenceLevel: String","type":"property"}],"path":"\/documentation\/xrplswift\/levels","title":"Levels","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/fields","title":"var FIELDS: [String : AnyObject]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/field_header_name_map","title":"var FIELD_HEADER_NAME_MAP: [FieldHeader : String]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/field_info_map","title":"var FIELD_INFO_MAP: [String : FieldInfo]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/ledger_entry_types","title":"var LEDGER_ENTRY_TYPES: [String : Int]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/ledger_entry_types_reverse","title":"var LEDGER_ENTRY_TYPES_REVERSE: [Int : String]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/transaction_results","title":"var TRANSACTION_RESULTS: [String : Int]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/transaction_results_reverse","title":"var TRANSACTION_RESULTS_REVERSE: [Int : String]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/transaction_types","title":"var TRANSACTION_TYPES: [String : Int]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/transaction_types_reverse","title":"var TRANSACTION_TYPES_REVERSE: [Int : String]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/types","title":"var TYPES: [String : Int]","type":"property"},{"path":"\/documentation\/xrplswift\/loaddefinitions\/type_ordinal_map","title":"var TYPE_ORDINAL_MAP: [String : Int]","type":"property"}],"path":"\/documentation\/xrplswift\/loaddefinitions","title":"LoadDefinitions","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/mnemonicoptions\/algorithm","title":"var algorithm: AlgorithmType","type":"property"},{"path":"\/documentation\/xrplswift\/mnemonicoptions\/derivationpath","title":"let derivationPath: DerivationPath","type":"property"},{"path":"\/documentation\/xrplswift\/mnemonicoptions\/masteraddress","title":"let masterAddress: String?","type":"property"},{"path":"\/documentation\/xrplswift\/mnemonicoptions\/mnemonicencoding","title":"let mnemonicEncoding: String?","type":"property"}],"path":"\/documentation\/xrplswift\/mnemonicoptions","title":"MnemonicOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/modifiednode\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/modifiednode\/modifiednode","title":"var modifiedNode: ModifiedNodeData","type":"property"}],"path":"\/documentation\/xrplswift\/modifiednode","title":"ModifiedNode","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/modifiednodedata\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/modifiednodedata\/finalfields","title":"var finalFields: FinalField?","type":"property"},{"path":"\/documentation\/xrplswift\/modifiednodedata\/ledgerentrytype","title":"var ledgerEntryType: String","type":"property"},{"path":"\/documentation\/xrplswift\/modifiednodedata\/ledgerindex","title":"var ledgerIndex: String","type":"property"},{"path":"\/documentation\/xrplswift\/modifiednodedata\/previoudtxnid","title":"var previoudTxnId: String?","type":"property"},{"path":"\/documentation\/xrplswift\/modifiednodedata\/previoudtxnlgrseq","title":"var previoudTxnLgrSeq: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/modifiednodedata\/previousfields","title":"var previousFields: FinalField?","type":"property"}],"path":"\/documentation\/xrplswift\/modifiednodedata","title":"ModifiedNodeData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftoffer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftoffer\/amount","title":"let amount: Amount","type":"property"},{"path":"\/documentation\/xrplswift\/nftoffer\/destination","title":"let destination: String?","type":"property"},{"path":"\/documentation\/xrplswift\/nftoffer\/expiration","title":"let expiration: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/nftoffer\/flags","title":"let flags: Int","type":"property"},{"path":"\/documentation\/xrplswift\/nftoffer\/nftofferindex","title":"let nftOfferIndex: String","type":"property"},{"path":"\/documentation\/xrplswift\/nftoffer\/owner","title":"let owner: String","type":"property"}],"path":"\/documentation\/xrplswift\/nftoffer","title":"NFTOffer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pathoption\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pathoption\/pathscomputed","title":"let pathsComputed: [Path]","type":"property"},{"path":"\/documentation\/xrplswift\/pathoption\/sourceamount","title":"let sourceAmount: Amount","type":"property"}],"path":"\/documentation\/xrplswift\/pathoption","title":"PathOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pathstep\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pathstep\/account","title":"var account: String?","type":"property"},{"path":"\/documentation\/xrplswift\/pathstep\/currency","title":"var currency: String?","type":"property"},{"path":"\/documentation\/xrplswift\/pathstep\/issuer","title":"var issuer: String","type":"property"}],"path":"\/documentation\/xrplswift\/pathstep","title":"PathStep","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paychannelnodefield\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paychannelnodefield\/account","title":"var account: String","type":"property"},{"path":"\/documentation\/xrplswift\/paychannelnodefield\/amount","title":"var amount: String","type":"property"},{"path":"\/documentation\/xrplswift\/paychannelnodefield\/destination","title":"var destination: String","type":"property"},{"path":"\/documentation\/xrplswift\/paychannelnodefield\/publickey","title":"var publicKey: String","type":"property"},{"path":"\/documentation\/xrplswift\/paychannelnodefield\/settledelay","title":"var settleDelay: Int","type":"property"}],"path":"\/documentation\/xrplswift\/paychannelnodefield","title":"PayChannelNodeField","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/queuedata\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/queuedata\/authchangequeued","title":"let authChangeQueued: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/queuedata\/highestsequence","title":"let highestSequence: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/queuedata\/lowestsequence","title":"let lowestSequence: Int?","type":"property"},{"path":"\/documentation\/xrplswift\/queuedata\/maxspenddropstotal","title":"let maxSpendDropsTotal: String?","type":"property"},{"path":"\/documentation\/xrplswift\/queuedata\/transactions","title":"let transactions: [QueueTransaction]?","type":"property"},{"path":"\/documentation\/xrplswift\/queuedata\/txncount","title":"let txnCount: Int","type":"property"}],"path":"\/documentation\/xrplswift\/queuedata","title":"QueueData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/queuetransaction\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/queuetransaction\/authchange","title":"let authChange: Bool","type":"property"},{"path":"\/documentation\/xrplswift\/queuetransaction\/fee","title":"let fee: String","type":"property"},{"path":"\/documentation\/xrplswift\/queuetransaction\/feelevel","title":"let feeLevel: String","type":"property"},{"path":"\/documentation\/xrplswift\/queuetransaction\/maxspenddrops","title":"let maxSpendDrops: String","type":"property"},{"path":"\/documentation\/xrplswift\/queuetransaction\/seq","title":"let seq: Int","type":"property"}],"path":"\/documentation\/xrplswift\/queuetransaction","title":"QueueTransaction","type":"struct"},{"path":"\/documentation\/xrplswift\/result","title":"Result","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplecipherparamsv3\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ripplecipherparamsv3","title":"RippleCipherParamsV3","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplecryptoparamsv3\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ripplecryptoparamsv3","title":"RippleCryptoParamsV3","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplekdfparamsv3\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ripplekdfparamsv3","title":"RippleKdfParamsV3","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplekeystoreparamsv3\/init(address:crypto:id:version:)","title":"init(address: String?, crypto: RippleCryptoParamsV3, id: String, version: Int)","type":"init"},{"path":"\/documentation\/xrplswift\/ripplekeystoreparamsv3\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ripplekeystoreparamsv3","title":"RippleKeystoreParamsV3","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ripplerequestfactory\/requesttype","title":"var requestType: Any?","type":"property"}],"path":"\/documentation\/xrplswift\/ripplerequestfactory","title":"RippleRequestFactory","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/seedoptions\/algorithm","title":"var algorithm: AlgorithmType","type":"property"},{"path":"\/documentation\/xrplswift\/seedoptions\/masteraddress","title":"var masterAddress: String?","type":"property"},{"path":"\/documentation\/xrplswift\/seedoptions\/seed","title":"var seed: String?","type":"property"}],"path":"\/documentation\/xrplswift\/seedoptions","title":"SeedOptions","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signatureresult\/hash","title":"let hash: String","type":"property"},{"path":"\/documentation\/xrplswift\/signatureresult\/txblob","title":"let txBlob: String","type":"property"}],"path":"\/documentation\/xrplswift\/signatureresult","title":"SignatureResult","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/sourcecurrencyamount\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/sourcecurrencyamount\/currency","title":"let currency: String","type":"property"},{"path":"\/documentation\/xrplswift\/sourcecurrencyamount\/issuer","title":"let issuer: String?","type":"property"}],"path":"\/documentation\/xrplswift\/sourcecurrencyamount","title":"SourceCurrencyAmount","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/state\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/state","title":"State","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/takeramount\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/takeramount\/currency","title":"let currency: String","type":"property"},{"path":"\/documentation\/xrplswift\/takeramount\/issuer","title":"let issuer: String?","type":"property"}],"path":"\/documentation\/xrplswift\/takeramount","title":"TakerAmount","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustsetflagsinterface\/tfclearfreeze","title":"let tfClearFreeze: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustsetflagsinterface\/tfclearnoripple","title":"let tfClearNoRipple: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustsetflagsinterface\/tfsetfreeze","title":"let tfSetFreeze: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustsetflagsinterface\/tfsetnoripple","title":"let tfSetNoRipple: Bool?","type":"property"},{"path":"\/documentation\/xrplswift\/trustsetflagsinterface\/tfsetfauth","title":"let tfSetfAuth: Bool?","type":"property"}],"path":"\/documentation\/xrplswift\/trustsetflagsinterface","title":"TrustSetFlagsInterface","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/warning\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/warning","title":"Warning","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplwebsocketresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/xrplwebsocketresponse\/id","title":"let id: String","type":"property"},{"path":"\/documentation\/xrplswift\/xrplwebsocketresponse\/result","title":"var result: [String : AnyObject]","type":"property"},{"path":"\/documentation\/xrplswift\/xrplwebsocketresponse\/status","title":"let status: String","type":"property"},{"path":"\/documentation\/xrplswift\/xrplwebsocketresponse\/type","title":"let type: String","type":"property"}],"path":"\/documentation\/xrplswift\/xrplwebsocketresponse","title":"XRPLWebSocketResponse","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/intentional_disconnect_code","title":"let INTENTIONAL_DISCONNECT_CODE: Int","type":"var"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/pbkdf2sha512(password:salt:)","title":"func PBKDF2SHA512(password: [UInt8], salt: [UInt8]) -> Data","type":"func"},{"path":"\/documentation\/xrplswift\/createwebsocket(url:config:)","title":"func createWebSocket(url: String, config: ConnectionOptions) -> WebSocketClient?","type":"func"},{"path":"\/documentation\/xrplswift\/decimaltoquality(decimal:)","title":"func decimalToQuality(decimal: String) throws -> Int","type":"func"},{"path":"\/documentation\/xrplswift\/decimaltotransferrate(decimal:)","title":"func decimalToTransferRate(decimal: String) throws -> Int","type":"func"},{"path":"\/documentation\/xrplswift\/dropstoxrp(_:)","title":"func dropsToXrp(Any) throws -> String","type":"func"},{"path":"\/documentation\/xrplswift\/ensureclassicaddress(account:)","title":"func ensureClassicAddress(account: String) throws -> String","type":"func"},{"path":"\/documentation\/xrplswift\/getfeexrp(client:cushion:)","title":"func getFeeXrp(client: XrplClient, cushion: Double?) async throws -> String","type":"func"},{"path":"\/documentation\/xrplswift\/getledgerindex(client:)","title":"func getLedgerIndex(client: XrplClient) async throws -> Int","type":"func"},{"path":"\/documentation\/xrplswift\/hashescrow(address:sequence:)","title":"func hashEscrow(address: String, sequence: Int) -> String","type":"func"},{"path":"\/documentation\/xrplswift\/hashpaymentchannel(address:dstaddress:sequence:)","title":"func hashPaymentChannel(address: String, dstAddress: String, sequence: Int) -> String","type":"func"},{"path":"\/documentation\/xrplswift\/hashsignedtx(tx:)-1ikg3","title":"func hashSignedTx(tx: String) throws -> String","type":"func"},{"path":"\/documentation\/xrplswift\/hashsignedtx(tx:)-9b7hn","title":"func hashSignedTx(tx: Transaction) throws -> String","type":"func"},{"path":"\/documentation\/xrplswift\/isamount(amount:)","title":"func isAmount(amount: Any) -> Bool","type":"func"},{"path":"\/documentation\/xrplswift\/isflagenabled(flags:checkflag:)","title":"func isFlagEnabled(flags: Int, checkFlag: Int) -> Bool","type":"func"},{"path":"\/documentation\/xrplswift\/isissuedcurrency(input:)","title":"func isIssuedCurrency(input: Any) -> Bool","type":"func"},{"path":"\/documentation\/xrplswift\/onlyhasfields(obj:fields:)","title":"func onlyHasFields(obj: [String : AnyObject], fields: [String]) -> Bool","type":"func"},{"path":"\/documentation\/xrplswift\/parseaccountrootflags(flags:)","title":"func parseAccountRootFlags(flags: Int) -> [AccountRootFlags : Bool]","type":"func"},{"path":"\/documentation\/xrplswift\/parseamountvalue(amount:)","title":"func parseAmountValue(amount: Any) -> Double?","type":"func"},{"path":"\/documentation\/xrplswift\/percenttoquality(percent:)","title":"func percentToQuality(percent: String) throws -> Int","type":"func"},{"path":"\/documentation\/xrplswift\/percenttotransferrate(percent:)","title":"func percentToTransferRate(percent: String) throws -> Int","type":"func"},{"path":"\/documentation\/xrplswift\/qualitytodecimal(quality:)","title":"func qualityToDecimal(quality: Int) throws -> String","type":"func"},{"path":"\/documentation\/xrplswift\/settransactionflagstonumber(tx:)","title":"func setTransactionFlagsToNumber(tx: inout [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/sha512half(hex:)","title":"func sha512Half(hex: String) -> String","type":"func"},{"path":"\/documentation\/xrplswift\/transferratetodecimal(rate:)","title":"func transferRateToDecimal(rate: Int) throws -> String","type":"func"},{"path":"\/documentation\/xrplswift\/validate(transaction:)","title":"func validate(transaction: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateaccountdelete(tx:)","title":"func validateAccountDelete(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateaccountset(tx:)","title":"func validateAccountSet(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatebasetransaction(common:)","title":"func validateBaseTransaction(common: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatecheckcancel(tx:)","title":"func validateCheckCancel(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatecheckcash(tx:)","title":"func validateCheckCash(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatecheckcreate(tx:)","title":"func validateCheckCreate(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatedepositpreauth(tx:)","title":"func validateDepositPreauth(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateescrowcancel(tx:)","title":"func validateEscrowCancel(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateescrowcreate(tx:)","title":"func validateEscrowCreate(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateescrowfinish(tx:)","title":"func validateEscrowFinish(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatenftokenacceptoffer(tx:)","title":"func validateNFTokenAcceptOffer(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatenftokenburn(tx:)","title":"func validateNFTokenBurn(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatenftokencanceloffer(tx:)","title":"func validateNFTokenCancelOffer(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatenftokencreateoffer(tx:)","title":"func validateNFTokenCreateOffer(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatenftokenmint(tx:)","title":"func validateNFTokenMint(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateoffercancel(tx:)","title":"func validateOfferCancel(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateoffercreate(tx:)","title":"func validateOfferCreate(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatepayment(tx:)","title":"func validatePayment(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatepaymentchannelclaim(tx:)","title":"func validatePaymentChannelClaim(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatepaymentchannelcreate(tx:)","title":"func validatePaymentChannelCreate(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatepaymentchannelfund(tx:)","title":"func validatePaymentChannelFund(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatesetregularkey(tx:)","title":"func validateSetRegularKey(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validateticketcreate(tx:)","title":"func validateTicketCreate(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/validatetrustset(tx:)","title":"func validateTrustSet(tx: [String : AnyObject]) throws","type":"func"},{"path":"\/documentation\/xrplswift\/websocketsendasync(ws:message:)","title":"func websocketSendAsync(ws: WebSocket, message: String) async -> EventLoopFuture<Void>","type":"func"},{"path":"\/documentation\/xrplswift\/xrptodrops(_:)","title":"func xrpToDrops(Any) throws -> String","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/==(_:_:)","title":"func == ([String : AnyObject], [String : AnyObject]) -> Bool","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/globalflags","title":"GlobalFlags","type":"typealias"},{"path":"\/documentation\/xrplswift\/ledgerentrytype","title":"LedgerEntryType","type":"typealias"},{"path":"\/documentation\/xrplswift\/path","title":"Path","type":"typealias"},{"path":"\/documentation\/xrplswift\/serverstate","title":"ServerState","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/aeserror","title":"case aesError","type":"case"},{"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/encryptionerror(_:)","title":"case encryptionError(String)","type":"case"},{"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/invalidaccounterror","title":"case invalidAccountError","type":"case"},{"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/invalidpassworderror","title":"case invalidPasswordError","type":"case"},{"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/keyderivationerror","title":"case keyDerivationError","type":"case"},{"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/noentropyerror","title":"case noEntropyError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/abstractripplekeystoreerror","title":"AbstractRippleKeystoreError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobject\/check(_:)","title":"case check(Check)","type":"case"},{"path":"\/documentation\/xrplswift\/accountobject\/depositpreauth(_:)","title":"case depositPreauth(DepositPreauth)","type":"case"},{"path":"\/documentation\/xrplswift\/accountobject\/escrow(_:)","title":"case escrow(Escrow)","type":"case"},{"path":"\/documentation\/xrplswift\/accountobject\/offer(_:)","title":"case offer(Offer)","type":"case"},{"path":"\/documentation\/xrplswift\/accountobject\/paymentchannel(_:)","title":"case paymentChannel(PayChannel)","type":"case"},{"path":"\/documentation\/xrplswift\/accountobject\/ripplestate(_:)","title":"case rippleState(RippleState)","type":"case"},{"path":"\/documentation\/xrplswift\/accountobject\/signerlist(_:)","title":"case signerList(SignerList)","type":"case"},{"path":"\/documentation\/xrplswift\/accountobject\/ticket(_:)","title":"case ticket(Ticket)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobject\/toany()","title":"func toAny() -> Any","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobject\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/accountobject\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobject\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/accountobject\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/accountobject","title":"AccountObject","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/check","title":"case check","type":"case"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/depositpreauth","title":"case depositPreauth","type":"case"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/escrow","title":"case escrow","type":"case"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/offer","title":"case offer","type":"case"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/paymentchannel","title":"case paymentChannel","type":"case"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/signerlist","title":"case signerList","type":"case"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/state","title":"case state","type":"case"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/ticket","title":"case ticket","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/accountobjecttype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/xrplswift\/accountobjecttype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/accountobjecttype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/accountobjecttype","title":"AccountObjectType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfdefaultripple","title":"case lsfDefaultRipple","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfdepositauth","title":"case lsfDepositAuth","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfdisablemaster","title":"case lsfDisableMaster","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfdisallowxrp","title":"case lsfDisallowXRP","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfglobalfreeze","title":"case lsfGlobalFreeze","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfnofreeze","title":"case lsfNoFreeze","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfpasswordspent","title":"case lsfPasswordSpent","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfrequireauth","title":"case lsfRequireAuth","type":"case"},{"path":"\/documentation\/xrplswift\/accountrootflags\/lsfrequiredesttag","title":"case lsfRequireDestTag","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountrootflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountrootflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/accountrootflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountrootflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountrootflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/accountrootflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/accountrootflags","title":"AccountRootFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfaccounttxid","title":"case asfAccountTxId","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfauthorizedminter","title":"case asfAuthorizedMinter","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfdefaultripple","title":"case asfDefaultRipple","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfdepositauth","title":"case asfDepositAuth","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfdisablemaster","title":"case asfDisableMaster","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfdisallowxrp","title":"case asfDisallowXrp","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfglobalfreeze","title":"case asfGlobalFreeze","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfnofreeze","title":"case asfNoFreeze","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfrequirauth","title":"case asfRequirAuth","type":"case"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/asfrequiredest","title":"case asfRequireDest","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/accountsetasfflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/xrplswift\/accountsetasfflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/accountsetasfflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/accountsetasfflags","title":"AccountSetAsfFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/invalidaddress","title":"case invalidAddress","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/invalidchecksum(error:)","title":"case invalidCheckSum(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/invalidlength(error:)","title":"case invalidLength(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/invalidprefix(error:)","title":"case invalidPrefix(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/invalidtype(error:)","title":"case invalidType(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/seederror(error:)","title":"case seedError(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/unexpectedpayloadlength(error:)","title":"case unexpectedPayloadLength(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/unsupportedaddress","title":"case unsupportedAddress","type":"case"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/valueerror","title":"case valueError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/addresscodecerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/addresscodecerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/addresscodecerror","title":"AddressCodecError","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/addresscodecutils\/xrplalphabet","title":"static let xrplAlphabet: [UInt8]","type":"property"}],"path":"\/documentation\/xrplswift\/addresscodecutils","title":"AddressCodecUtils","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/algorithmtype\/ed25519","title":"case ed25519","type":"case"},{"path":"\/documentation\/xrplswift\/algorithmtype\/secp256k1","title":"case secp256k1","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/algorithmtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/algorithmtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/algorithmtype","title":"AlgorithmType","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/base58\/base58checkdecode(_:)","title":"static func base58CheckDecode(String) -> [UInt8]?","type":"method"},{"path":"\/documentation\/xrplswift\/base58\/base58checkencode(_:)","title":"static func base58CheckEncode([UInt8]) -> String","type":"method"},{"path":"\/documentation\/xrplswift\/base58\/base58decode(_:)","title":"static func base58Decode(String) -> [UInt8]?","type":"method"},{"path":"\/documentation\/xrplswift\/base58\/base58encode(_:)","title":"static func base58Encode([UInt8]) -> String","type":"method"}],"path":"\/documentation\/xrplswift\/base58","title":"Base58","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseledgerwrapper\/string(_:)","title":"case string(String)","type":"case"},{"path":"\/documentation\/xrplswift\/baseledgerwrapper\/transaction(_:)","title":"case transaction(BaseTransaction)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseledgerwrapper\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/baseledgerwrapper\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/baseledgerwrapper\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/baseledgerwrapper\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/baseledgerwrapper","title":"BaseLedgerWrapper","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binarycodecerrors\/checksumfails","title":"case checksumFails","type":"case"},{"path":"\/documentation\/xrplswift\/binarycodecerrors\/invalidaddress","title":"case invalidAddress","type":"case"},{"path":"\/documentation\/xrplswift\/binarycodecerrors\/unknownerror(error:)","title":"case unknownError(error: String)","type":"case"},{"path":"\/documentation\/xrplswift\/binarycodecerrors\/unsupportedaddress","title":"case unsupportedAddress","type":"case"},{"path":"\/documentation\/xrplswift\/binarycodecerrors\/valueerror","title":"case valueError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/binarycodecerrors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/binarycodecerrors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/binarycodecerrors","title":"BinaryCodecErrors","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/finalfield\/account(_:)","title":"case account(AccountRootNodeField)","type":"case"},{"path":"\/documentation\/xrplswift\/finalfield\/directory(_:)","title":"case directory(DirectoryNodeField)","type":"case"},{"path":"\/documentation\/xrplswift\/finalfield\/paychannel(_:)","title":"case paychannel(PayChannelNodeField)","type":"case"},{"path":"\/documentation\/xrplswift\/finalfield\/unknown","title":"case unknown","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/finalfield\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/finalfield","title":"FinalField","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hashprefix\/inner_node","title":"case INNER_NODE","type":"case"},{"path":"\/documentation\/xrplswift\/hashprefix\/leaf_node","title":"case LEAF_NODE","type":"case"},{"path":"\/documentation\/xrplswift\/hashprefix\/ledger","title":"case LEDGER","type":"case"},{"path":"\/documentation\/xrplswift\/hashprefix\/transaction_id","title":"case TRANSACTION_ID","type":"case"},{"path":"\/documentation\/xrplswift\/hashprefix\/transaction_multisign","title":"case TRANSACTION_MULTISIGN","type":"case"},{"path":"\/documentation\/xrplswift\/hashprefix\/transaction_node","title":"case TRANSACTION_NODE","type":"case"},{"path":"\/documentation\/xrplswift\/hashprefix\/transaction_sign","title":"case TRANSACTION_SIGN","type":"case"},{"path":"\/documentation\/xrplswift\/hashprefix\/transaction_sign_testnet","title":"case TRANSACTION_SIGN_TESTNET","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hashprefix\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hashprefix\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/hashprefix\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hashprefix\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hashprefix\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/hashprefix\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/hashprefix","title":"HashPrefix","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hookflag\/asfaccounttxid","title":"case asfAccountTxId","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hookflag\/init(rawvalue:)","title":"init?(rawValue: UInt32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hookflag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/hookflag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hookflag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/hookflag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/hookflag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/hookflag","title":"HookFlag","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_rpc_devnet","title":"case xrpl_rpc_Devnet","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_rpc_hooknet","title":"case xrpl_rpc_Hooknet","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_rpc_mainnets1","title":"case xrpl_rpc_MainNetS1","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_rpc_mainnets2","title":"case xrpl_rpc_MainNetS2","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_rpc_testnet","title":"case xrpl_rpc_Testnet","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_rpc_xls20","title":"case xrpl_rpc_Xls20","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_ws_devnet","title":"case xrpl_ws_Devnet","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_ws_hooknet","title":"case xrpl_ws_Hooknet","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_ws_mainnets1","title":"case xrpl_ws_MainnetS1","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_ws_mainnets2","title":"case xrpl_ws_MainnetS2","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_ws_testnet","title":"case xrpl_ws_Testnet","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_ws_xls20","title":"case xrpl_ws_Xls20","type":"case"},{"path":"\/documentation\/xrplswift\/lhost\/xrpl_ws_xumm","title":"case xrpl_ws_Xumm","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lhost\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lhost\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/lhost\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lhost\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/lhost\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/lhost\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/lhost","title":"LHost","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerindex\/number(_:)","title":"case number(Int)","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerindex\/string(_:)","title":"case string(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerindex\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ledgerindex\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerindex\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/ledgerindex\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/ledgerindex","title":"LedgerIndex","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerqueuetx\/json(_:)","title":"case json([String : String])","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerqueuetx\/metadata(_:)","title":"case metadata(TransactionAndMetadata)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerqueuetx\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/ledgerqueuetx","title":"LedgerQueueTx","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/account","title":"case account","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/amendment","title":"case amendment","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/bookdir","title":"case bookDir","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/check","title":"case check","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/contract","title":"case contract","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/depositpreauth","title":"case depositPreauth","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/dirnode","title":"case dirNode","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/escrow","title":"case escrow","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/feesettings","title":"case feeSettings","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/generatormap","title":"case generatorMap","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/offer","title":"case offer","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/ownerdir","title":"case ownerDir","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/paychan","title":"case paychan","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/ripplestate","title":"case rippleState","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/signerlist","title":"case signerList","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/skiplist","title":"case skipList","type":"case"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/ticket","title":"case ticket","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/ledgerspaces\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/ledgerspaces\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/ledgerspaces\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/ledgerspaces","title":"LedgerSpaces","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateofferflags\/tfsellnftoken","title":"case tfSellNFToken","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateofferflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateofferflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/nftokencreateofferflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateofferflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokencreateofferflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/nftokencreateofferflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/nftokencreateofferflags","title":"NFTokenCreateOfferFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/tfburnable","title":"case tfBurnable","type":"case"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/tfonlyxrp","title":"case tfOnlyXrp","type":"case"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/tftransferable","title":"case tfTransferable","type":"case"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/tftrustline","title":"case tfTrustline","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/nftokenmintflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nftokenmintflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/nftokenmintflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/nftokenmintflags","title":"NFTokenMintFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/newfield\/account(_:)","title":"case account(AccountRootNodeField)","type":"case"},{"path":"\/documentation\/xrplswift\/newfield\/directory(_:)","title":"case directory(DirectoryNodeField)","type":"case"},{"path":"\/documentation\/xrplswift\/newfield\/paychannel(_:)","title":"case paychannel(PayChannelNodeField)","type":"case"},{"path":"\/documentation\/xrplswift\/newfield\/unknown","title":"case unknown","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/newfield\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/newfield","title":"NewField","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/node\/created(_:)","title":"case created(CreatedNode)","type":"case"},{"path":"\/documentation\/xrplswift\/node\/deleted(_:)","title":"case deleted(DeletedNode)","type":"case"},{"path":"\/documentation\/xrplswift\/node\/modified(_:)","title":"case modified(ModifiedNode)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/node\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/node\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/node\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/node\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/node","title":"Node","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nodetype\/account_state","title":"case ACCOUNT_STATE","type":"case"},{"path":"\/documentation\/xrplswift\/nodetype\/inner","title":"case INNER","type":"case"},{"path":"\/documentation\/xrplswift\/nodetype\/transaction_metadata","title":"case TRANSACTION_METADATA","type":"case"},{"path":"\/documentation\/xrplswift\/nodetype\/transaction_no_metadata","title":"case TRANSACTION_NO_METADATA","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nodetype\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nodetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/nodetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nodetype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/nodetype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/nodetype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/nodetype","title":"NodeType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreateflags\/tffillorkill","title":"case tfFillOrKill","type":"case"},{"path":"\/documentation\/xrplswift\/offercreateflags\/tfimmediateorcancel","title":"case tfImmediateOrCancel","type":"case"},{"path":"\/documentation\/xrplswift\/offercreateflags\/tfpassive","title":"case tfPassive","type":"case"},{"path":"\/documentation\/xrplswift\/offercreateflags\/tfsell","title":"case tfSell","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreateflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreateflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/offercreateflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreateflags\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreateflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offercreateflags\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/xrplswift\/offercreateflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/offercreateflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/offercreateflags","title":"OfferCreateFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offerflags\/lsfpassive","title":"case lsfPassive","type":"case"},{"path":"\/documentation\/xrplswift\/offerflags\/lsfsell","title":"case lsfSell","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offerflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offerflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/offerflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offerflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/offerflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/offerflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/offerflags","title":"OfferFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/tfclose","title":"case tfClose","type":"case"},{"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/tfrenew","title":"case tfRenew","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/paymentchannelclaimflag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/paymentchannelclaimflag","title":"PaymentChannelClaimFlag","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentflags\/tflimitquality","title":"case tfLimitQuality","type":"case"},{"path":"\/documentation\/xrplswift\/paymentflags\/tfnodirectripple","title":"case tfNoDirectRipple","type":"case"},{"path":"\/documentation\/xrplswift\/paymentflags\/tfpartialpayment","title":"case tfPartialPayment","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/paymentflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/paymentflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/paymentflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/paymentflags","title":"PaymentFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/secp256k1error\/derivationfailed","title":"case derivationFailed","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/secp256k1error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/secp256k1error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/secp256k1error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/secp256k1error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/secp256k1error","title":"SECP256K1Error","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistflags\/lsfoneownercount","title":"case lsfOneOwnerCount","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistflags\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/signerlistflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistflags\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signerlistflags\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/signerlistflags\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/signerlistflags","title":"SignerListFlags","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signingerror\/invalidprivatekey","title":"case invalidPrivateKey","type":"case"},{"path":"\/documentation\/xrplswift\/signingerror\/invalidpublickey","title":"case invalidPublicKey","type":"case"},{"path":"\/documentation\/xrplswift\/signingerror\/invalidsignature","title":"case invalidSignature","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signingerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/signingerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/signingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/signingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/signingerror","title":"SigningError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submittransaction\/string(_:)","title":"case string(String)","type":"case"},{"path":"\/documentation\/xrplswift\/submittransaction\/tx(_:)","title":"case tx(Transaction)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submittransaction\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/submittransaction\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/submittransaction\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/submittransaction\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/submittransaction","title":"SubmitTransaction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transaction\/accountdelete(_:)","title":"case accountDelete(AccountDelete)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/accountset(_:)","title":"case accountSet(AccountSet)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/checkcancel(_:)","title":"case checkCancel(CheckCancel)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/checkcash(_:)","title":"case checkCash(CheckCash)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/checkcreate(_:)","title":"case checkCreate(CheckCreate)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/depositpreauth(_:)","title":"case depositPreauth(DepositPreauth)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/escrowcancel(_:)","title":"case escrowCancel(EscrowCancel)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/escrowcreate(_:)","title":"case escrowCreate(EscrowCreate)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/escrowfinish(_:)","title":"case escrowFinish(EscrowFinish)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/nftokenacceptoffer(_:)","title":"case nfTokenAcceptOffer(NFTokenAcceptOffer)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/nftokenburn(_:)","title":"case nfTokenBurn(NFTokenBurn)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/nftokencanceloffer(_:)","title":"case nfTokenCancelOffer(NFTokenCancelOffer)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/nftokencreateoffer(_:)","title":"case nfTokenCreateOffer(NFTokenCreateOffer)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/nftokenmint(_:)","title":"case nfTokenMint(NFTokenMint)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/offercancel(_:)","title":"case offerCancel(OfferCancel)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/offercreate(_:)","title":"case offerCreate(OfferCreate)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/payment(_:)","title":"case payment(Payment)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/paymentchannelclaim(_:)","title":"case paymentChannelClaim(PaymentChannelClaim)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/paymentchannelcreate(_:)","title":"case paymentChannelCreate(PaymentChannelCreate)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/paymentchannelfund(_:)","title":"case paymentChannelFund(PaymentChannelFund)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/setregularkey(_:)","title":"case setRegularKey(SetRegularKey)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/signerlistset(_:)","title":"case signerListSet(SignerListSet)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/ticketcreate(_:)","title":"case ticketCreate(TicketCreate)","type":"case"},{"path":"\/documentation\/xrplswift\/transaction\/trustset(_:)","title":"case trustSet(TrustSet)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transaction\/init(_:)","title":"init?([String : AnyObject]) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transaction\/toany()","title":"func toAny() throws -> Any","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transaction\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xrplswift\/transaction\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/transaction\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/xrplswift\/transaction\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/transaction","title":"Transaction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustsetflag\/tfclearfreeze","title":"case tfClearFreeze","type":"case"},{"path":"\/documentation\/xrplswift\/trustsetflag\/tfclearnoripple","title":"case tfClearNoRipple","type":"case"},{"path":"\/documentation\/xrplswift\/trustsetflag\/tfsetfreeze","title":"case tfSetFreeze","type":"case"},{"path":"\/documentation\/xrplswift\/trustsetflag\/tfsetnoripple","title":"case tfSetNoRipple","type":"case"},{"path":"\/documentation\/xrplswift\/trustsetflag\/tfsetfauth","title":"case tfSetfAuth","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustsetflag\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustsetflag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/trustsetflag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustsetflag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/trustsetflag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/trustsetflag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/trustsetflag","title":"TrustSetFlag","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/urandomerror\/open(_:)","title":"case open(Int32)","type":"case"},{"path":"\/documentation\/xrplswift\/urandomerror\/read(_:)","title":"case read(Int32)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/urandomerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xrplswift\/urandomerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/urandomerror","title":"URandomError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/websocketstate\/closed","title":"case closed","type":"case"},{"path":"\/documentation\/xrplswift\/websocketstate\/closing","title":"case closing","type":"case"},{"path":"\/documentation\/xrplswift\/websocketstate\/open","title":"case open","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/websocketstate\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/websocketstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/websocketstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/websocketstate\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/websocketstate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xrplswift\/websocketstate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/websocketstate","title":"WebsocketState","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/wordlist\/english","title":"case english","type":"case"},{"path":"\/documentation\/xrplswift\/wordlist\/french","title":"case french","type":"case"},{"path":"\/documentation\/xrplswift\/wordlist\/italian","title":"case italian","type":"case"},{"path":"\/documentation\/xrplswift\/wordlist\/japanese","title":"case japanese","type":"case"},{"path":"\/documentation\/xrplswift\/wordlist\/korean","title":"case korean","type":"case"},{"path":"\/documentation\/xrplswift\/wordlist\/simplifiedchinese","title":"case simplifiedChinese","type":"case"},{"path":"\/documentation\/xrplswift\/wordlist\/spanish","title":"case spanish","type":"case"},{"path":"\/documentation\/xrplswift\/wordlist\/traditionalchinese","title":"case traditionalChinese","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/wordlist\/words","title":"var words: [String]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xrplswift\/wordlist\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xrplswift\/wordlist\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/xrplswift\/wordlist","title":"WordList","type":"enum"}],"path":"\/documentation\/xrplswift","title":"XRPLSwift","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}